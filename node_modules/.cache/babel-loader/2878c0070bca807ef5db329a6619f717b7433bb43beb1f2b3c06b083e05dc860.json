{"ast":null,"code":"import { btoa, readAsArrayBuffer } from 'pouchdb-binary-utils';\nimport Md5 from 'spark-md5';\nvar setImmediateShim = self.setImmediate || self.setTimeout;\nvar MD5_CHUNK_SIZE = 32768;\nfunction rawToBase64(raw) {\n  return btoa(raw);\n}\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  }\n  return blob.slice(start, end);\n}\nfunction appendBlob(buffer, blob, start, end, callback) {\n  if (start > 0 || end < blob.size) {\n    // only slice blob if we really need to\n    blob = sliceBlob(blob, start, end);\n  }\n  readAsArrayBuffer(blob, function (arrayBuffer) {\n    buffer.append(arrayBuffer);\n    callback();\n  });\n}\nfunction appendString(buffer, string, start, end, callback) {\n  if (start > 0 || end < string.length) {\n    // only create a substring if we really need to\n    string = string.substring(start, end);\n  }\n  buffer.appendBinary(string);\n  callback();\n}\nfunction binaryMd5(data, callback) {\n  var inputIsString = typeof data === 'string';\n  var len = inputIsString ? data.length : data.size;\n  var chunkSize = Math.min(MD5_CHUNK_SIZE, len);\n  var chunks = Math.ceil(len / chunkSize);\n  var currentChunk = 0;\n  var buffer = inputIsString ? new Md5() : new Md5.ArrayBuffer();\n  var append = inputIsString ? appendString : appendBlob;\n  function next() {\n    setImmediateShim(loadNextChunk);\n  }\n  function done() {\n    var raw = buffer.end(true);\n    var base64 = rawToBase64(raw);\n    callback(base64);\n    buffer.destroy();\n  }\n  function loadNextChunk() {\n    var start = currentChunk * chunkSize;\n    var end = start + chunkSize;\n    currentChunk++;\n    if (currentChunk < chunks) {\n      append(buffer, data, start, end, next);\n    } else {\n      append(buffer, data, start, end, done);\n    }\n  }\n  loadNextChunk();\n}\nfunction stringMd5(string) {\n  return Md5.hash(string);\n}\nexport { binaryMd5, stringMd5 };","map":{"version":3,"names":["btoa","readAsArrayBuffer","Md5","setImmediateShim","self","setImmediate","setTimeout","MD5_CHUNK_SIZE","rawToBase64","raw","sliceBlob","blob","start","end","webkitSlice","slice","appendBlob","buffer","callback","size","arrayBuffer","append","appendString","string","length","substring","appendBinary","binaryMd5","data","inputIsString","len","chunkSize","Math","min","chunks","ceil","currentChunk","ArrayBuffer","next","loadNextChunk","done","base64","destroy","stringMd5","hash"],"sources":["/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/node_modules/pouchdb-md5/lib/index-browser.es.js"],"sourcesContent":["import { btoa, readAsArrayBuffer } from 'pouchdb-binary-utils';\nimport Md5 from 'spark-md5';\n\nvar setImmediateShim = self.setImmediate || self.setTimeout;\nvar MD5_CHUNK_SIZE = 32768;\n\nfunction rawToBase64(raw) {\n  return btoa(raw);\n}\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  }\n  return blob.slice(start, end);\n}\n\nfunction appendBlob(buffer, blob, start, end, callback) {\n  if (start > 0 || end < blob.size) {\n    // only slice blob if we really need to\n    blob = sliceBlob(blob, start, end);\n  }\n  readAsArrayBuffer(blob, function (arrayBuffer) {\n    buffer.append(arrayBuffer);\n    callback();\n  });\n}\n\nfunction appendString(buffer, string, start, end, callback) {\n  if (start > 0 || end < string.length) {\n    // only create a substring if we really need to\n    string = string.substring(start, end);\n  }\n  buffer.appendBinary(string);\n  callback();\n}\n\nfunction binaryMd5(data, callback) {\n  var inputIsString = typeof data === 'string';\n  var len = inputIsString ? data.length : data.size;\n  var chunkSize = Math.min(MD5_CHUNK_SIZE, len);\n  var chunks = Math.ceil(len / chunkSize);\n  var currentChunk = 0;\n  var buffer = inputIsString ? new Md5() : new Md5.ArrayBuffer();\n\n  var append = inputIsString ? appendString : appendBlob;\n\n  function next() {\n    setImmediateShim(loadNextChunk);\n  }\n\n  function done() {\n    var raw = buffer.end(true);\n    var base64 = rawToBase64(raw);\n    callback(base64);\n    buffer.destroy();\n  }\n\n  function loadNextChunk() {\n    var start = currentChunk * chunkSize;\n    var end = start + chunkSize;\n    currentChunk++;\n    if (currentChunk < chunks) {\n      append(buffer, data, start, end, next);\n    } else {\n      append(buffer, data, start, end, done);\n    }\n  }\n  loadNextChunk();\n}\n\nfunction stringMd5(string) {\n  return Md5.hash(string);\n}\n\nexport { binaryMd5, stringMd5 };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}