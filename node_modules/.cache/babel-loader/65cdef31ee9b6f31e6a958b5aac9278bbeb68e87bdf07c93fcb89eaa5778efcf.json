{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SubscriptionManager_pouch, _SubscriptionManager_destroyListener, _SubscriptionManager_docsSubscription, _SubscriptionManager_viewsSubscription, _SubscriptionManager_didUnsubscribeAll;\nimport { clone } from 'pouchdb-utils';\nexport default class SubscriptionManager {\n  constructor(pouch) {\n    _SubscriptionManager_pouch.set(this, void 0);\n    _SubscriptionManager_destroyListener.set(this, void 0);\n    _SubscriptionManager_docsSubscription.set(this, null);\n    _SubscriptionManager_viewsSubscription.set(this, new Map());\n    _SubscriptionManager_didUnsubscribeAll.set(this, false);\n    __classPrivateFieldSet(this, _SubscriptionManager_pouch, pouch, \"f\");\n    __classPrivateFieldSet(this, _SubscriptionManager_destroyListener, () => {\n      this.unsubscribeAll();\n    }, \"f\");\n    pouch.once('destroyed', __classPrivateFieldGet(this, _SubscriptionManager_destroyListener, \"f\"));\n  }\n  subscribeToDocs(ids, callback) {\n    var _a;\n    if (__classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, \"f\")) {\n      return () => {\n        return;\n      };\n    }\n    if (__classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\") == null) {\n      __classPrivateFieldSet(this, _SubscriptionManager_docsSubscription, createDocSubscription(__classPrivateFieldGet(this, _SubscriptionManager_pouch, \"f\")), \"f\");\n    }\n    const isIds = Array.isArray(ids) && ids.length > 0;\n    if (isIds) {\n      for (const id of ids !== null && ids !== void 0 ? ids : []) {\n        if (__classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").ids.has(id)) {\n          (_a = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").ids.get(id)) === null || _a === void 0 ? void 0 : _a.add(callback);\n        } else {\n          const set = new Set();\n          set.add(callback);\n          __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").ids.set(id, set);\n        }\n      }\n    } else {\n      __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").all.add(callback);\n    }\n    let didUnsubscribe = false;\n    return () => {\n      var _a, _b, _c, _d;\n      if (didUnsubscribe || __classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, \"f\")) return;\n      didUnsubscribe = true;\n      if (isIds) {\n        for (const id of ids !== null && ids !== void 0 ? ids : []) {\n          const set = (_a = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\")) === null || _a === void 0 ? void 0 : _a.ids.get(id);\n          set === null || set === void 0 ? void 0 : set.delete(callback);\n          if ((set === null || set === void 0 ? void 0 : set.size) === 0) {\n            (_b = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\")) === null || _b === void 0 ? void 0 : _b.ids.delete(id);\n          }\n        }\n      } else {\n        (_c = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\")) === null || _c === void 0 ? void 0 : _c.all.delete(callback);\n      }\n      if (((_d = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\")) === null || _d === void 0 ? void 0 : _d.all.size) === 0 && __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").ids.size === 0) {\n        __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").changesFeed.cancel();\n        __classPrivateFieldSet(this, _SubscriptionManager_docsSubscription, null, \"f\");\n      }\n    };\n  }\n  subscribeToView(fun, callback) {\n    if (__classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, \"f\")) {\n      return () => {\n        return;\n      };\n    }\n    let subscription;\n    if (__classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, \"f\").has(fun)) {\n      subscription = __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, \"f\").get(fun);\n    } else {\n      subscription = subscribeToView(__classPrivateFieldGet(this, _SubscriptionManager_pouch, \"f\"), fun);\n      __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, \"f\").set(fun, subscription);\n    }\n    subscription.callbacks.add(callback);\n    let didUnsubscribe = false;\n    return () => {\n      if (didUnsubscribe || __classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, \"f\")) return;\n      didUnsubscribe = true;\n      subscription.callbacks.delete(callback);\n      if (subscription.callbacks.size === 0) {\n        subscription.feed.cancel();\n        __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, \"f\").delete(fun);\n      }\n    };\n  }\n  unsubscribeAll() {\n    if (__classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, \"f\")) return;\n    __classPrivateFieldSet(this, _SubscriptionManager_didUnsubscribeAll, true, \"f\");\n    __classPrivateFieldGet(this, _SubscriptionManager_pouch, \"f\").removeListener('destroyed', __classPrivateFieldGet(this, _SubscriptionManager_destroyListener, \"f\"));\n    if (__classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\")) {\n      __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").changesFeed.cancel();\n      __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").all.clear();\n      __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").ids.forEach(set => {\n        set.clear();\n      });\n      __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").ids.clear();\n    }\n    for (const viewInfo of __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, \"f\").values()) {\n      viewInfo.feed.cancel();\n      viewInfo.callbacks.clear();\n    }\n    __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, \"f\").clear();\n  }\n}\n_SubscriptionManager_pouch = new WeakMap(), _SubscriptionManager_destroyListener = new WeakMap(), _SubscriptionManager_docsSubscription = new WeakMap(), _SubscriptionManager_viewsSubscription = new WeakMap(), _SubscriptionManager_didUnsubscribeAll = new WeakMap();\nfunction createDocSubscription(pouch) {\n  let docsSubscription = null;\n  const changesFeed = pouch.changes({\n    since: 'now',\n    live: true\n  }).on('change', change => {\n    const hasAll = (docsSubscription === null || docsSubscription === void 0 ? void 0 : docsSubscription.all) != null && docsSubscription.all.size > 0;\n    const hasId = docsSubscription && docsSubscription.ids.has(change.id);\n    if (change.deleted) {\n      if (hasAll) {\n        const subscription = docsSubscription;\n        notify(subscription.all, true, change.id);\n      }\n      if (hasId) {\n        const subscription = docsSubscription;\n        notify(subscription.ids.get(change.id), true, change.id);\n      }\n    } else {\n      pouch.get(change.id).then(doc => {\n        if (hasAll) {\n          const subscription = docsSubscription;\n          notify(subscription.all, false, change.id, doc);\n        }\n        if (hasId) {\n          const subscription = docsSubscription;\n          notify(subscription.ids.get(change.id), false, change.id, doc);\n        }\n      }).catch(console.error);\n    }\n  });\n  docsSubscription = {\n    changesFeed,\n    all: new Set(),\n    ids: new Map()\n  };\n  return docsSubscription;\n}\nfunction notify(set, deleted, id, doc) {\n  for (const subscription of set) {\n    try {\n      const document = doc ? clone(doc) : undefined;\n      subscription(deleted, id, document);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n}\nfunction subscribeToView(pouch, view) {\n  let viewsSubscription = null;\n  const changesFeed = pouch.changes({\n    since: 'now',\n    live: true,\n    filter: '_view',\n    view\n  }).on('change', change => {\n    var _a;\n    for (const callback of (_a = viewsSubscription === null || viewsSubscription === void 0 ? void 0 : viewsSubscription.callbacks) !== null && _a !== void 0 ? _a : []) {\n      try {\n        callback(change.id);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  });\n  viewsSubscription = {\n    feed: changesFeed,\n    callbacks: new Set()\n  };\n  return viewsSubscription;\n}","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_SubscriptionManager_pouch","_SubscriptionManager_destroyListener","_SubscriptionManager_docsSubscription","_SubscriptionManager_viewsSubscription","_SubscriptionManager_didUnsubscribeAll","clone","SubscriptionManager","constructor","pouch","Map","unsubscribeAll","once","subscribeToDocs","ids","callback","_a","createDocSubscription","isIds","Array","isArray","length","id","add","Set","all","didUnsubscribe","_b","_c","_d","delete","size","changesFeed","cancel","subscribeToView","fun","subscription","callbacks","feed","removeListener","clear","forEach","viewInfo","values","WeakMap","docsSubscription","changes","since","live","on","change","hasAll","hasId","deleted","notify","then","doc","catch","console","error","document","undefined","err","view","viewsSubscription","filter"],"sources":["/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/node_modules/use-pouchdb/lib/subscription.js"],"sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SubscriptionManager_pouch, _SubscriptionManager_destroyListener, _SubscriptionManager_docsSubscription, _SubscriptionManager_viewsSubscription, _SubscriptionManager_didUnsubscribeAll;\nimport { clone } from 'pouchdb-utils';\nexport default class SubscriptionManager {\n    constructor(pouch) {\n        _SubscriptionManager_pouch.set(this, void 0);\n        _SubscriptionManager_destroyListener.set(this, void 0);\n        _SubscriptionManager_docsSubscription.set(this, null);\n        _SubscriptionManager_viewsSubscription.set(this, new Map());\n        _SubscriptionManager_didUnsubscribeAll.set(this, false);\n        __classPrivateFieldSet(this, _SubscriptionManager_pouch, pouch, \"f\");\n        __classPrivateFieldSet(this, _SubscriptionManager_destroyListener, () => {\n            this.unsubscribeAll();\n        }, \"f\");\n        pouch.once('destroyed', __classPrivateFieldGet(this, _SubscriptionManager_destroyListener, \"f\"));\n    }\n    subscribeToDocs(ids, callback) {\n        var _a;\n        if (__classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, \"f\")) {\n            return () => {\n                return;\n            };\n        }\n        if (__classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\") == null) {\n            __classPrivateFieldSet(this, _SubscriptionManager_docsSubscription, createDocSubscription(__classPrivateFieldGet(this, _SubscriptionManager_pouch, \"f\")), \"f\");\n        }\n        const isIds = Array.isArray(ids) && ids.length > 0;\n        if (isIds) {\n            for (const id of ids !== null && ids !== void 0 ? ids : []) {\n                if (__classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").ids.has(id)) {\n                    (_a = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").ids\n                        .get(id)) === null || _a === void 0 ? void 0 : _a.add(callback);\n                }\n                else {\n                    const set = new Set();\n                    set.add(callback);\n                    __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").ids.set(id, set);\n                }\n            }\n        }\n        else {\n            __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").all.add(callback);\n        }\n        let didUnsubscribe = false;\n        return () => {\n            var _a, _b, _c, _d;\n            if (didUnsubscribe || __classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, \"f\"))\n                return;\n            didUnsubscribe = true;\n            if (isIds) {\n                for (const id of ids !== null && ids !== void 0 ? ids : []) {\n                    const set = (_a = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\")) === null || _a === void 0 ? void 0 : _a.ids.get(id);\n                    set === null || set === void 0 ? void 0 : set.delete(callback);\n                    if ((set === null || set === void 0 ? void 0 : set.size) === 0) {\n                        (_b = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\")) === null || _b === void 0 ? void 0 : _b.ids.delete(id);\n                    }\n                }\n            }\n            else {\n                (_c = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\")) === null || _c === void 0 ? void 0 : _c.all.delete(callback);\n            }\n            if (((_d = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\")) === null || _d === void 0 ? void 0 : _d.all.size) === 0 &&\n                __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").ids.size === 0) {\n                __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").changesFeed.cancel();\n                __classPrivateFieldSet(this, _SubscriptionManager_docsSubscription, null, \"f\");\n            }\n        };\n    }\n    subscribeToView(fun, callback) {\n        if (__classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, \"f\")) {\n            return () => {\n                return;\n            };\n        }\n        let subscription;\n        if (__classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, \"f\").has(fun)) {\n            subscription = __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, \"f\").get(fun);\n        }\n        else {\n            subscription = subscribeToView(__classPrivateFieldGet(this, _SubscriptionManager_pouch, \"f\"), fun);\n            __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, \"f\").set(fun, subscription);\n        }\n        subscription.callbacks.add(callback);\n        let didUnsubscribe = false;\n        return () => {\n            if (didUnsubscribe || __classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, \"f\"))\n                return;\n            didUnsubscribe = true;\n            subscription.callbacks.delete(callback);\n            if (subscription.callbacks.size === 0) {\n                subscription.feed.cancel();\n                __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, \"f\").delete(fun);\n            }\n        };\n    }\n    unsubscribeAll() {\n        if (__classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, \"f\"))\n            return;\n        __classPrivateFieldSet(this, _SubscriptionManager_didUnsubscribeAll, true, \"f\");\n        __classPrivateFieldGet(this, _SubscriptionManager_pouch, \"f\").removeListener('destroyed', __classPrivateFieldGet(this, _SubscriptionManager_destroyListener, \"f\"));\n        if (__classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\")) {\n            __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").changesFeed.cancel();\n            __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").all.clear();\n            __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").ids.forEach(set => {\n                set.clear();\n            });\n            __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, \"f\").ids.clear();\n        }\n        for (const viewInfo of __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, \"f\").values()) {\n            viewInfo.feed.cancel();\n            viewInfo.callbacks.clear();\n        }\n        __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, \"f\").clear();\n    }\n}\n_SubscriptionManager_pouch = new WeakMap(), _SubscriptionManager_destroyListener = new WeakMap(), _SubscriptionManager_docsSubscription = new WeakMap(), _SubscriptionManager_viewsSubscription = new WeakMap(), _SubscriptionManager_didUnsubscribeAll = new WeakMap();\nfunction createDocSubscription(pouch) {\n    let docsSubscription = null;\n    const changesFeed = pouch\n        .changes({\n        since: 'now',\n        live: true,\n    })\n        .on('change', change => {\n        const hasAll = (docsSubscription === null || docsSubscription === void 0 ? void 0 : docsSubscription.all) != null && docsSubscription.all.size > 0;\n        const hasId = docsSubscription && docsSubscription.ids.has(change.id);\n        if (change.deleted) {\n            if (hasAll) {\n                const subscription = docsSubscription;\n                notify(subscription.all, true, change.id);\n            }\n            if (hasId) {\n                const subscription = docsSubscription;\n                notify(subscription.ids.get(change.id), true, change.id);\n            }\n        }\n        else {\n            pouch\n                .get(change.id)\n                .then(doc => {\n                if (hasAll) {\n                    const subscription = docsSubscription;\n                    notify(subscription.all, false, change.id, doc);\n                }\n                if (hasId) {\n                    const subscription = docsSubscription;\n                    notify(subscription.ids.get(change.id), false, change.id, doc);\n                }\n            })\n                .catch(console.error);\n        }\n    });\n    docsSubscription = {\n        changesFeed,\n        all: new Set(),\n        ids: new Map(),\n    };\n    return docsSubscription;\n}\nfunction notify(set, deleted, id, doc) {\n    for (const subscription of set) {\n        try {\n            const document = doc ? clone(doc) : undefined;\n            subscription(deleted, id, document);\n        }\n        catch (err) {\n            console.error(err);\n        }\n    }\n}\nfunction subscribeToView(pouch, view) {\n    let viewsSubscription = null;\n    const changesFeed = pouch\n        .changes({\n        since: 'now',\n        live: true,\n        filter: '_view',\n        view,\n    })\n        .on('change', change => {\n        var _a;\n        for (const callback of (_a = viewsSubscription === null || viewsSubscription === void 0 ? void 0 : viewsSubscription.callbacks) !== null && _a !== void 0 ? _a : []) {\n            try {\n                callback(change.id);\n            }\n            catch (err) {\n                console.error(err);\n            }\n        }\n    });\n    viewsSubscription = {\n        feed: changesFeed,\n        callbacks: new Set(),\n    };\n    return viewsSubscription;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}