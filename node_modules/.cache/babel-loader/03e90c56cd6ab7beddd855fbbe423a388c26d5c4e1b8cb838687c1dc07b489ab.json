{"ast":null,"code":"import React__default, { useState } from 'react';\nimport { u as useForm, F as Form, H as HeaderText, S as Spacer, E as EmailInput, a as SubmitButton, b as SecondaryButton, I as Input, P as PasswordInput } from './index.esm-189a9937.js';\nimport { _ as _extends, u as useEasybase } from './index-775190d4.js';\nimport { s as styled, t as toast } from './Auth-25393280.js';\nimport { E as ErrorText } from './ErrorText-6391e3af.js';\nconst SecondaryText = styled.h2(props => _extends({\n  fontFamily: \"inherit\",\n  fontSize: 15,\n  fontWeight: 300,\n  letterSpacing: -.2,\n  lineHeight: '20px',\n  whiteSpace: 'normal'\n}, props.theme.secondaryText ? _extends({}, props.theme.secondaryText) : {}));\nfunction SecondaryText$1(props) {\n  return React__default.createElement(SecondaryText, Object.assign({}, props));\n}\nfunction ForgotPassword(_ref) {\n  let {\n    setCurrentPage,\n    dictionary,\n    emailTemplate\n  } = _ref;\n  const [onConfirm, setOnConfirm] = useState(false);\n  const [forgottenUsername, setForgottenUsername] = useState();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors,\n      isSubmitting\n    }\n  } = useForm();\n  const {\n    forgotPassword,\n    forgotPasswordConfirm\n  } = useEasybase();\n  const onSubmit = async formData => {\n    if (!formData.email) {\n      return;\n    }\n    const forgotRes = await forgotPassword(formData.email, emailTemplate);\n    if (forgotRes.success) {\n      setForgottenUsername(formData.email);\n      setOnConfirm(true);\n      toast.success('Check your email for a verification code');\n    } else {\n      if (forgotRes.errorCode === \"RequestLimitExceeded\") {\n        toast.error(dictionary.errorRequestLimitExceeded);\n      } else if (forgotRes.errorCode === \"BadFormat\") {\n        reset();\n        toast.error(dictionary.errorBadInputFormat);\n      } else if (forgotRes.errorCode === \"NoUserExists\") {\n        reset();\n        toast.error(dictionary.errorNoAccountFound);\n      } else {\n        reset();\n        toast.error('Bad request');\n      }\n    }\n  };\n  const onConfirmSubmit = async formData => {\n    if (!formData.code || !formData.newPassword || !forgottenUsername) {\n      return;\n    }\n    const forgotConfirmRes = await forgotPasswordConfirm(formData.code, forgottenUsername, formData.newPassword);\n    if (forgotConfirmRes.success) {\n      setOnConfirm(false);\n      setForgottenUsername(\"\");\n      setCurrentPage('SignIn');\n      toast.success('Password successfully changed');\n    } else {\n      if (forgotConfirmRes.errorCode === \"BadPasswordLength\") {\n        toast.error(dictionary.errorPasswordTooShort);\n      } else if (forgotConfirmRes.errorCode === \"BadFormat\") {\n        reset();\n        toast.error(dictionary.errorBadInputFormat);\n      } else if (forgotConfirmRes.errorCode === \"NoUserExists\") {\n        reset();\n        toast.error(dictionary.errorNoAccountFound);\n      } else if (forgotConfirmRes.errorCode === \"WrongVerificationCode\") {\n        toast.error(dictionary.errorWrongVerificationCode);\n      } else {\n        toast.error('Bad request');\n      }\n    }\n  };\n  const passwordReqs = {\n    minLength: {\n      value: 8,\n      message: \"Password must be at least 8 characters long\"\n    },\n    maxLength: {\n      value: 100,\n      message: \"Password too long\"\n    },\n    pattern: {\n      value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n      message: \"Must contain a digit and uppercase and lowercase letters\"\n    }\n  };\n  const codeReqs = {\n    minLength: {\n      value: 8,\n      message: \"Incorrect code length\"\n    }\n  };\n  if (!onConfirm) {\n    return React__default.createElement(Form, {\n      onSubmit: handleSubmit(onSubmit)\n    }, React__default.createElement(HeaderText, null, dictionary.forgotPasswordHeader), React__default.createElement(SecondaryText$1, null, dictionary.forgotPasswordSecondaryHeader), React__default.createElement(Spacer, {\n      size: \"medium\"\n    }), React__default.createElement(EmailInput, {\n      register: () => register(\"email\"),\n      label: dictionary.newEmailLabel,\n      disabled: isSubmitting\n    }), React__default.createElement(Spacer, {\n      size: \"medium\"\n    }), React__default.createElement(SubmitButton, {\n      disabled: isSubmitting\n    }, dictionary.forgotPasswordSubmitButton), React__default.createElement(SecondaryButton, {\n      onClick: _ => setCurrentPage(\"SignIn\"),\n      disabled: isSubmitting\n    }, dictionary.backToSignIn));\n  } else {\n    var _errors$code, _errors$newPassword;\n    return React__default.createElement(Form, {\n      onSubmit: handleSubmit(onConfirmSubmit)\n    }, React__default.createElement(HeaderText, null, dictionary.forgotPasswordConfirmHeader), React__default.createElement(Spacer, {\n      size: \"medium\"\n    }), React__default.createElement(Input, {\n      register: () => register(\"code\", codeReqs),\n      label: dictionary.codeLabel,\n      disabled: isSubmitting\n    }), React__default.createElement(ErrorText, {\n      value: (_errors$code = errors.code) == null ? void 0 : _errors$code.message\n    }), React__default.createElement(Spacer, {\n      size: \"xlarge\"\n    }), React__default.createElement(PasswordInput, {\n      register: () => register(\"newPassword\", passwordReqs),\n      label: dictionary.forgotPasswordConfirmLabel,\n      autoComplete: \"new-password\",\n      disabled: isSubmitting\n    }), React__default.createElement(ErrorText, {\n      value: (_errors$newPassword = errors.newPassword) == null ? void 0 : _errors$newPassword.message\n    }), React__default.createElement(Spacer, {\n      size: \"xlarge\"\n    }), React__default.createElement(SubmitButton, {\n      disabled: isSubmitting\n    }, dictionary.forgotPasswordConfirmSubmitButton));\n  }\n}\nexport { ForgotPassword as default };","map":{"version":3,"mappings":"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","names":["SecondaryText","styled","h2","props","fontFamily","fontSize","fontWeight","letterSpacing","lineHeight","whiteSpace","theme","secondaryText","React","setCurrentPage","dictionary","emailTemplate","onConfirm","setOnConfirm","useState","forgottenUsername","setForgottenUsername","register","handleSubmit","reset","formState","errors","isSubmitting","useForm","forgotPassword","forgotPasswordConfirm","useEasybase","onSubmit","formData","email","forgotRes","success","toast","errorCode","error","errorRequestLimitExceeded","errorBadInputFormat","errorNoAccountFound","onConfirmSubmit","code","newPassword","forgotConfirmRes","errorPasswordTooShort","errorWrongVerificationCode","passwordReqs","minLength","value","message","maxLength","pattern","codeReqs","Form","HeaderText","forgotPasswordHeader","forgotPasswordSecondaryHeader","Spacer","size","EmailInput","label","newEmailLabel","disabled","SubmitButton","forgotPasswordSubmitButton","SecondaryButton","onClick","_","backToSignIn","forgotPasswordConfirmHeader","Input","codeLabel","ErrorText","_errors$code","PasswordInput","forgotPasswordConfirmLabel","autoComplete","_errors$newPassword","forgotPasswordConfirmSubmitButton"],"sources":["/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/front/node_modules/easybase-react/src/ui/Auth/components/SecondaryText.tsx","/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/front/node_modules/easybase-react/src/ui/Auth/pages/ForgotPassword.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst SecondaryText = styled.h2(props => ({\n    fontFamily: \"inherit\",\n    fontSize: 15,\n    fontWeight: 300,\n    letterSpacing: -.2,\n    lineHeight: '20px',\n    whiteSpace: 'normal',\n    ...(props.theme.secondaryText ? { ...props.theme.secondaryText } : {})\n}))\n\nexport default function (props: React.HTMLAttributes<HTMLHeadingElement>) {\n    return (\n        <SecondaryText {...props} />\n    )\n}\n","import React, { useState } from 'react';\nimport Form from '../components/Form';\nimport EmailInput from '../components/EmailInput';\nimport HeaderText from '../components/HeaderText';\nimport SecondaryText from '../components/SecondaryText';\nimport SecondaryButton from '../components/SecondaryButton';\nimport SubmitButton from '../components/SubmitButton';\nimport Spacer from '../components/Spacer';\nimport { useForm } from 'react-hook-form';\nimport { IPage } from '../../uiTypes';\nimport toast from 'react-hot-toast';\nimport ErrorText from '../components/ErrorText';\nimport Input from '../components/internal/Input';\nimport PasswordInput from '../components/PasswordInput';\nimport useEasybase from '../../../useEasybase';\n\nexport default function ({ setCurrentPage, dictionary, emailTemplate }: IPage) {\n    const [onConfirm, setOnConfirm] = useState<boolean>(false);\n    const [forgottenUsername, setForgottenUsername] = useState<string | undefined>();\n    const { register, handleSubmit, reset, formState: { errors, isSubmitting } } = useForm();\n    const { forgotPassword, forgotPasswordConfirm } = useEasybase();\n\n    const onSubmit = async (formData: Record<string, string>) => {\n        if (!formData.email) {\n            return;\n        }\n\n        const forgotRes = await forgotPassword(formData.email, emailTemplate);\n        if (forgotRes.success) {\n            setForgottenUsername(formData.email);\n            setOnConfirm(true);\n            toast.success('Check your email for a verification code')\n        } else {\n            if (forgotRes.errorCode === \"RequestLimitExceeded\") {\n                toast.error(dictionary.errorRequestLimitExceeded!);\n            } else if (forgotRes.errorCode === \"BadFormat\") {\n                reset();\n                toast.error(dictionary.errorBadInputFormat!);\n            } else if (forgotRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast.error(dictionary.errorNoAccountFound!);\n            } else {\n                reset();\n                toast.error('Bad request');\n            }\n        }\n    }\n\n    const onConfirmSubmit = async (formData: Record<string, string>) => {\n        if (!formData.code || !formData.newPassword || !forgottenUsername) {\n            return;\n        }\n        const forgotConfirmRes = await forgotPasswordConfirm(formData.code, forgottenUsername, formData.newPassword)\n        if (forgotConfirmRes.success) {\n            setOnConfirm(false);\n            setForgottenUsername(\"\");\n            setCurrentPage('SignIn');\n            toast.success('Password successfully changed')\n        } else {\n            if (forgotConfirmRes.errorCode === \"BadPasswordLength\") {\n                toast.error(dictionary.errorPasswordTooShort!);\n            } else if (forgotConfirmRes.errorCode === \"BadFormat\") {\n                reset();\n                toast.error(dictionary.errorBadInputFormat!);\n            } else if (forgotConfirmRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast.error(dictionary.errorNoAccountFound!);\n            } else if (forgotConfirmRes.errorCode === \"WrongVerificationCode\") {\n                toast.error(dictionary.errorWrongVerificationCode!);\n            } else {\n                toast.error('Bad request');\n            }\n        }\n    }\n\n    const passwordReqs = {\n        minLength: {\n            value: 8,\n            message: \"Password must be at least 8 characters long\"\n        },\n        maxLength: {\n            value: 100,\n            message: \"Password too long\"\n        },\n        pattern: {\n            value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n            message: \"Must contain a digit and uppercase and lowercase letters\"\n        }\n    }\n\n    const codeReqs = {\n        minLength: {\n            value: 8,\n            message: \"Incorrect code length\"\n        }\n    }\n\n    if (!onConfirm) {\n        return (\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <HeaderText>{dictionary.forgotPasswordHeader}</HeaderText>\n                <SecondaryText>{dictionary.forgotPasswordSecondaryHeader}</SecondaryText>\n                <Spacer size=\"medium\" />\n                <EmailInput\n                    register={() => register(\"email\")}\n                    label={dictionary.newEmailLabel}\n                    disabled={isSubmitting}\n                />\n                <Spacer size=\"medium\" />\n                <SubmitButton disabled={isSubmitting}>{dictionary.forgotPasswordSubmitButton}</SubmitButton>\n                <SecondaryButton onClick={_ => setCurrentPage(\"SignIn\")} disabled={isSubmitting}>{dictionary.backToSignIn}</SecondaryButton>\n            </Form>\n        )\n    } else {\n        return (\n            <Form onSubmit={handleSubmit(onConfirmSubmit)}>\n                <HeaderText>{dictionary.forgotPasswordConfirmHeader}</HeaderText>\n                <Spacer size=\"medium\" />\n                <Input\n                    register={() => register(\"code\", codeReqs)}\n                    label={dictionary.codeLabel!}\n                    disabled={isSubmitting}\n                />\n                <ErrorText value={errors.code?.message} />\n                <Spacer size=\"xlarge\" />\n                <PasswordInput\n                    register={() => register(\"newPassword\", passwordReqs)}\n                    label={dictionary.forgotPasswordConfirmLabel}\n                    autoComplete=\"new-password\"\n                    disabled={isSubmitting}\n                />\n                <ErrorText value={errors.newPassword?.message} />\n                <Spacer size=\"xlarge\" />\n                <SubmitButton disabled={isSubmitting}>{dictionary.forgotPasswordConfirmSubmitButton}</SubmitButton>\n            </Form>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}