{"ast":null,"code":"import React, { createContext, useContext as useReactContext, useMemo, useState } from 'react';\nimport SubscriptionManager from './subscription';\nconst PouchContext = /*#__PURE__*/createContext({\n  defaultKey: '',\n  databases: {}\n});\nif (process.env.NODE_ENV !== 'production') {\n  PouchContext.displayName = 'UsePouchDBContext';\n}\n/**\n * Create a context to provide access to PouchDB databases.\n * All hooks of usePouchDB will use this context.\n * @param args React arguments.\n */\nexport function Provider(args) {\n  const {\n    pouchdb,\n    name\n  } = args;\n  const {\n    databases: dbsArg,\n    default: defaultArg\n  } = args;\n  // collection of databases added in this Provider\n  let databases;\n  // key of the default database\n  let defaultKey;\n  // normalize the two argument types into one\n  if (dbsArg != null && defaultArg != null) {\n    databases = dbsArg;\n    defaultKey = defaultArg.toString();\n  } else if (pouchdb != null) {\n    defaultKey = (name === null || name === void 0 ? void 0 : name.toString()) || pouchdb.name;\n    databases = {\n      [defaultKey]: pouchdb\n    };\n  } else {\n    throw new TypeError('databases argument must be pared with the default argument');\n  }\n  const contextObjects = useAddSubscriptionManager(databases);\n  const parentDatabases = useReactContext(PouchContext).databases;\n  // merge the contextObjects into the parent context and set the \"default\" key\n  const context = useMemo(() => {\n    return {\n      defaultKey,\n      databases: Object.assign(Object.assign({}, parentDatabases), contextObjects)\n    };\n  }, [contextObjects, defaultKey, parentDatabases]);\n  return React.createElement(PouchContext.Provider, {\n    value: context\n  }, args.children);\n}\n/**\n * Creates for every database a SubscriptionManager.\n * Memorizes all databases and reuses the SubscriptionManagers of them.\n * Also unsubscribes SubscriptionManager.\n * @param databases HashMap containing PouchDB databases.\n */\nfunction useAddSubscriptionManager(databases) {\n  // memory for last DB and SubscriptionManager pairs\n  const [lastDatabases, setLastDatabases] = useState(databases);\n  const [lastContextObject, setLastContextObject] = useState(null);\n  // This is for re-renders, which happens when setState is called while rendering.\n  // https://beta.reactjs.org/apis/usestate#storing-information-from-previous-renders\n  if (lastContextObject && databases === lastDatabases) return lastContextObject;\n  const contextObjects = {};\n  const dbToUnsubscribe = new Set(Object.keys(lastContextObject !== null && lastContextObject !== void 0 ? lastContextObject : {}));\n  let didAddNewDatabase = false;\n  for (const [key, db] of Object.entries(databases)) {\n    if (lastContextObject && lastDatabases[key] === db) {\n      // DB didn't change\n      contextObjects[key] = lastContextObject[key];\n      dbToUnsubscribe.delete(key);\n    } else {\n      // It is a new or changed DB\n      didAddNewDatabase = true;\n      contextObjects[key] = {\n        pouchdb: db,\n        subscriptionManager: new SubscriptionManager(db)\n      };\n    }\n  }\n  if (didAddNewDatabase || dbToUnsubscribe.size > 0) {\n    setLastDatabases(databases);\n    setLastContextObject(contextObjects);\n  } else if (lastContextObject) {\n    return lastContextObject; // nothing did change and not first render: use last\n  }\n\n  if (lastContextObject) {\n    for (const key of dbToUnsubscribe) {\n      lastContextObject[key].subscriptionManager.unsubscribeAll();\n    }\n  }\n  return contextObjects;\n}\n/**\n * Provides access to the Database & SubscriptionManager pair in the usePouchDB-Context.\n * @param name Name of the Database or its overwritten name. Defaults to \"default\".\n */\nexport function useContext(name) {\n  const {\n    defaultKey,\n    databases\n  } = useReactContext(PouchContext);\n  if (defaultKey === '' && databases[defaultKey] == null && Object.keys(databases).length === 0) {\n    throw new Error('could not find PouchDB context value; please ensure the component is wrapped in a <Provider>');\n  }\n  const key = name === '_default' ? defaultKey : name !== null && name !== void 0 ? name : defaultKey;\n  if (!(key in databases)) {\n    throw new Error(`could not find a PouchDB database with name of \"${name}\"`);\n  }\n  return databases[key];\n}","map":{"version":3,"names":["React","createContext","useContext","useReactContext","useMemo","useState","SubscriptionManager","PouchContext","defaultKey","databases","process","env","NODE_ENV","displayName","Provider","args","pouchdb","name","dbsArg","default","defaultArg","toString","TypeError","contextObjects","useAddSubscriptionManager","parentDatabases","context","Object","assign","createElement","value","children","lastDatabases","setLastDatabases","lastContextObject","setLastContextObject","dbToUnsubscribe","Set","keys","didAddNewDatabase","key","db","entries","delete","subscriptionManager","size","unsubscribeAll","length","Error"],"sources":["/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/node_modules/use-pouchdb/lib/context.js"],"sourcesContent":["import React, { createContext, useContext as useReactContext, useMemo, useState, } from 'react';\nimport SubscriptionManager from './subscription';\nconst PouchContext = /*#__PURE__*/ createContext({\n    defaultKey: '',\n    databases: {},\n});\nif (process.env.NODE_ENV !== 'production') {\n    PouchContext.displayName = 'UsePouchDBContext';\n}\n/**\n * Create a context to provide access to PouchDB databases.\n * All hooks of usePouchDB will use this context.\n * @param args React arguments.\n */\nexport function Provider(args) {\n    const { pouchdb, name } = args;\n    const { databases: dbsArg, default: defaultArg } = args;\n    // collection of databases added in this Provider\n    let databases;\n    // key of the default database\n    let defaultKey;\n    // normalize the two argument types into one\n    if (dbsArg != null && defaultArg != null) {\n        databases = dbsArg;\n        defaultKey = defaultArg.toString();\n    }\n    else if (pouchdb != null) {\n        defaultKey = (name === null || name === void 0 ? void 0 : name.toString()) || pouchdb.name;\n        databases = { [defaultKey]: pouchdb };\n    }\n    else {\n        throw new TypeError('databases argument must be pared with the default argument');\n    }\n    const contextObjects = useAddSubscriptionManager(databases);\n    const parentDatabases = useReactContext(PouchContext).databases;\n    // merge the contextObjects into the parent context and set the \"default\" key\n    const context = useMemo(() => {\n        return {\n            defaultKey,\n            databases: Object.assign(Object.assign({}, parentDatabases), contextObjects),\n        };\n    }, [contextObjects, defaultKey, parentDatabases]);\n    return (React.createElement(PouchContext.Provider, { value: context }, args.children));\n}\n/**\n * Creates for every database a SubscriptionManager.\n * Memorizes all databases and reuses the SubscriptionManagers of them.\n * Also unsubscribes SubscriptionManager.\n * @param databases HashMap containing PouchDB databases.\n */\nfunction useAddSubscriptionManager(databases) {\n    // memory for last DB and SubscriptionManager pairs\n    const [lastDatabases, setLastDatabases] = useState(databases);\n    const [lastContextObject, setLastContextObject] = useState(null);\n    // This is for re-renders, which happens when setState is called while rendering.\n    // https://beta.reactjs.org/apis/usestate#storing-information-from-previous-renders\n    if (lastContextObject && databases === lastDatabases)\n        return lastContextObject;\n    const contextObjects = {};\n    const dbToUnsubscribe = new Set(Object.keys(lastContextObject !== null && lastContextObject !== void 0 ? lastContextObject : {}));\n    let didAddNewDatabase = false;\n    for (const [key, db] of Object.entries(databases)) {\n        if (lastContextObject && lastDatabases[key] === db) {\n            // DB didn't change\n            contextObjects[key] = lastContextObject[key];\n            dbToUnsubscribe.delete(key);\n        }\n        else {\n            // It is a new or changed DB\n            didAddNewDatabase = true;\n            contextObjects[key] = {\n                pouchdb: db,\n                subscriptionManager: new SubscriptionManager(db),\n            };\n        }\n    }\n    if (didAddNewDatabase || dbToUnsubscribe.size > 0) {\n        setLastDatabases(databases);\n        setLastContextObject(contextObjects);\n    }\n    else if (lastContextObject) {\n        return lastContextObject; // nothing did change and not first render: use last\n    }\n    if (lastContextObject) {\n        for (const key of dbToUnsubscribe) {\n            lastContextObject[key].subscriptionManager.unsubscribeAll();\n        }\n    }\n    return contextObjects;\n}\n/**\n * Provides access to the Database & SubscriptionManager pair in the usePouchDB-Context.\n * @param name Name of the Database or its overwritten name. Defaults to \"default\".\n */\nexport function useContext(name) {\n    const { defaultKey, databases } = useReactContext(PouchContext);\n    if (defaultKey === '' &&\n        databases[defaultKey] == null &&\n        Object.keys(databases).length === 0) {\n        throw new Error('could not find PouchDB context value; please ensure the component is wrapped in a <Provider>');\n    }\n    const key = name === '_default' ? defaultKey : name !== null && name !== void 0 ? name : defaultKey;\n    if (!(key in databases)) {\n        throw new Error(`could not find a PouchDB database with name of \"${name}\"`);\n    }\n    return databases[key];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}