{"ast":null,"code":"import { _ as _extends } from './index-775190d4.js';\nimport * as React from 'react';\nimport React__default from 'react';\nimport { s as styled } from './Auth-25393280.js';\nconst Form = styled.form(props => _extends({\n  display: \"flex\",\n  justifyContent: \"center\",\n  minWidth: 300,\n  width: 380,\n  padding: '33px 55px',\n  boxShadow: '0 5px 10px 0 rgb(0 0 0 / 10%)',\n  borderRadius: 10,\n  flexDirection: 'column',\n  fontFamily: \"inherit\",\n  margin: '6% auto 50px',\n  '@media (max-width: 520px)': {\n    margin: '0px !important',\n    position: 'fixed !important',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    width: 'initial !important'\n  }\n}, props.theme.form ? _extends({}, props.theme.form) : {}));\nfunction Form$1(props) {\n  return React__default.createElement(Form, Object.assign({}, props), props.children);\n}\nconst Label = styled.label(props => _extends({\n  display: \"none\",\n  fontFamily: \"inherit\"\n}, props.theme.textFieldLabel ? _extends({}, props.theme.textFieldLabel) : {}));\nfunction Label$1(props) {\n  return React__default.createElement(Label, Object.assign({}, props));\n}\nconst TextFieldRoot = styled.div(props => _extends({\n  position: 'relative',\n  width: '100%',\n  maxWidth: '100%',\n  padding: 0,\n  height: 46,\n  fontFamily: \"inherit\"\n}, props.theme.textFieldRoot ? _extends({}, props.theme.textFieldRoot) : {}));\nconst TextField = styled.input(props => _extends({\n  display: \"block\",\n  width: '100%',\n  background: '0 0',\n  border: 'none',\n  fontFamily: \"inherit\"\n}, props.theme.textField ? _extends({}, props.theme.textField) : {}));\nconst Bar = styled.div(props => props.theme.textFieldBar ? _extends({}, props.theme.textFieldBar) : {});\nfunction Input(props) {\n  return React__default.createElement(TextFieldRoot, null, React__default.createElement(TextField, Object.assign({\n    placeholder: \"\\u00A0\"\n  }, props, props.register(), {\n    id: \"textField-\" + props.label.replace(/[^a-zA-Z]+/g, '')\n  })), React__default.createElement(Bar, null), React__default.createElement(Label$1, {\n    htmlFor: \"textField-\" + props.label.replace(/[^a-zA-Z]+/g, '')\n  }, props.label));\n}\nfunction EmailInput(props) {\n  return React__default.createElement(Input, Object.assign({\n    label: \"Email\",\n    autoComplete: \"email\"\n  }, props, {\n    type: \"email\",\n    required: true\n  }));\n}\nfunction PasswordInput(props) {\n  return React__default.createElement(Input, Object.assign({\n    label: \"Password\"\n  }, props, {\n    type: \"password\",\n    required: true\n  }));\n}\nconst HeaderText = styled.h1(props => _extends({\n  fontFamily: \"inherit\",\n  fontSize: 24,\n  fontWeight: 500,\n  letterSpacing: -.2,\n  marginBlockStart: '0.67em',\n  marginBlockEnd: '0.67em',\n  marginInlineStart: 0,\n  marginInlineEnd: 0,\n  marginTop: '16px !important'\n}, props.theme.headerText ? _extends({}, props.theme.headerText) : {}));\nfunction HeaderText$1(props) {\n  return React__default.createElement(HeaderText, Object.assign({}, props));\n}\nconst TextButton = styled.button(props => _extends({\n  cursor: \"pointer\",\n  color: '#635bff',\n  whiteSpace: 'nowrap',\n  fontWeight: 500,\n  fontSize: 14,\n  margin: 0,\n  background: 'none',\n  border: 'none'\n}, props.theme.textButton ? _extends({}, props.theme.textButton) : {}));\nfunction TextButton$1(props) {\n  return React__default.createElement(TextButton, Object.assign({}, props, {\n    type: \"button\"\n  }));\n}\nconst SecondaryButton = styled(TextButton$1)(props => _extends({\n  margin: '15px'\n}, props.theme.secondaryButton ? _extends({}, props.theme.secondaryButton) : {}));\nfunction SecondaryButton$1(props) {\n  return React__default.createElement(SecondaryButton, Object.assign({}, props));\n}\nconst SubmitButtonRoot = styled.div(props => props.theme.submitButtonRoot ? props.theme.submitButtonRoot : {});\nconst SubmitButton = styled.button(props => _extends({\n  position: 'relative',\n  border: \"none\",\n  verticalAlign: \"middle\",\n  textAlign: \"center\",\n  textOverflow: \"ellipsis\",\n  overflow: \"hidden\",\n  outline: \"none\",\n  cursor: \"pointer\",\n  boxSizing: 'border-box'\n}, props.theme.submitButton ? _extends({}, props.theme.submitButton) : {}));\nfunction SubmitButton$1(props) {\n  return React__default.createElement(SubmitButtonRoot, null, React__default.createElement(SubmitButton, Object.assign({\n    type: \"submit\"\n  }, props)));\n}\nfunction Spacer(props) {\n  switch (props.size) {\n    case \"xlarge\":\n      return React__default.createElement(\"div\", {\n        style: {\n          height: 64\n        }\n      });\n    case \"large\":\n      return React__default.createElement(\"div\", {\n        style: {\n          height: 58\n        }\n      });\n    case \"small\":\n      return React__default.createElement(\"div\", {\n        style: {\n          height: 16\n        }\n      });\n    default:\n      return React__default.createElement(\"div\", {\n        style: {\n          height: 37\n        }\n      });\n  }\n}\nvar isCheckBoxInput = element => element.type === 'checkbox';\nvar isDateObject = data => data instanceof Date;\nvar isNullOrUndefined = value => value == null;\nconst isObjectType = value => typeof value === 'object';\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\nvar getEventValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\nvar compact = value => (value || []).filter(Boolean);\nvar isUndefined = val => val === undefined;\nvar get = (obj, path, defaultValue) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n  return undefined;\n};\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\nReact.createContext(null);\nvar getProxyFormState = function (formState, _proxyFormState, localProxyFormState) {\n  let isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  function createGetter(prop) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n  const result = {};\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key)\n    });\n  }\n  return result;\n};\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(key => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));\n};\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\nfunction useSubscribe(props) {\n  const _props = React.useRef(props);\n  _props.current = props;\n  React.useEffect(() => {\n    const tearDown = subscription => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n    const subscription = !props.disabled && _props.current.subject.subscribe({\n      next: _props.current.callback\n    });\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\nvar isString = value => typeof value === 'string';\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names);\n  }\n  if (isArray) {\n    return names.map(fieldName => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n  }\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\nvar isFunction = value => typeof value === 'function';\nvar objectHasFunction = data => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\nvar isKey = value => /^\\w*$/.test(value);\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some(watchName => name.startsWith(watchName) && /^\\.\\w+/.test(name.slice(watchName.length))));\nfunction cloneObject(data) {\n  let copy;\n  const isArray = Array.isArray(data);\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n  return copy;\n}\nfunction createSubject() {\n  let _observers = [];\n  const next = value => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n  const subscribe = observer => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter(o => o !== observer);\n      }\n    };\n  };\n  const unsubscribe = () => {\n    _observers = [];\n  };\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe\n  };\n}\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (const key of keys1) {\n    const val1 = object1[key];\n    if (!keys2.includes(key)) {\n      return false;\n    }\n    if (key !== 'ref') {\n      const val2 = object2[key];\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\nvar isBoolean = value => typeof value === 'boolean';\nvar isFileInput = element => element.type === 'file';\nvar isHTMLElement = value => value instanceof HTMLElement;\nvar isMultipleSelect = element => element.type === `select-multiple`;\nvar isRadioInput = element => element.type === 'radio';\nvar isRadioOrCheckbox = ref => isRadioInput(ref) || isCheckBoxInput(ref);\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\nvar live = ref => isHTMLElement(ref) && document.contains(ref);\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return object;\n}\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n  if (childObject) {\n    delete childObject[key];\n  }\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n    if (k > 0) {\n      previousObjRef = object;\n    }\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n      previousObjRef = objectRef;\n    }\n  }\n  return object;\n}\nfunction markFieldsDirty(data) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const isParentNodeArray = Array.isArray(data);\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n  return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n  const isParentNodeArray = Array.isArray(data);\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : Object.assign({}, markFieldsDirty(data[key]));\n        } else {\n          getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n  return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n    return options[0].checked && !options[0].disabled ?\n    // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n  return defaultResult;\n};\nvar getFieldValueAs = (value, _ref) => {\n  let {\n    valueAsNumber,\n    valueAsDate,\n    setValueAs\n  } = _ref;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate && isString(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\nfunction getFieldValue(_f) {\n  const ref = _f.ref;\n  if (_f.refs ? _f.refs.every(ref => ref.disabled) : ref.disabled) {\n    return;\n  }\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(_ref2 => {\n      let {\n        value\n      } = _ref2;\n      return value;\n    });\n  }\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n  for (const name of fieldsNames) {\n    const field = get(_fields, name);\n    field && set(fields, name, field._f);\n  }\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\nvar isRegex = value => value instanceof RegExp;\nvar getRuleValue = rule => isUndefined(rule) ? undefined : isRegex(rule) ? rule.source : isObject(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;\nvar hasValidation = options => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\nfunction schemaErrorLookup(errors, _fields, name) {\n  const error = get(errors, name);\n  if (error || isKey(name)) {\n    return {\n      error,\n      name\n    };\n  }\n  const names = name.split('.');\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return {\n        name\n      };\n    }\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError\n      };\n    }\n    names.pop();\n  }\n  return {\n    name\n  };\n}\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\nvar isMessage = value => isString(value) || React.isValidElement(value);\nfunction getValidateError(result, ref) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef = refs ? refs[0] : ref;\n  const setCustomValidity = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n  const getMinMaxMessage = function (exceedMax, maxLengthMessage, minLengthMessage) {\n    let maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n    let minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name].message);\n        return error;\n      }\n    }\n  }\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name].message);\n        return error;\n      }\n    }\n  }\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidity(validateError.message);\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n  setCustomValidity(true);\n  return error;\n};\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\nfunction createFormControl() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let _options = Object.assign(Object.assign({}, defaultOptions), props);\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  let _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  let delayErrorCallback;\n  let timer = 0;\n  let validateFields = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  const _subjects = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject()\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n  const debounce = (callback, wait) => function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    clearTimeout(timer);\n    timer = window.setTimeout(() => callback(...args), wait);\n  };\n  const _updateValid = async shouldSkipRender => {\n    let isValid = false;\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuildInValidation(_fields, true);\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid\n        });\n      }\n    }\n    return isValid;\n  };\n  const _updateFieldArray = function (name, method, args) {\n    let values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let shouldSetValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let shouldSetFields = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _stateFlags.action = true;\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid\n    });\n  };\n  const updateErrors = (name, error) => (set(_formState.errors, name, error), _subjects.state.next({\n    errors: _formState.errors\n  }));\n  const updateValidAndValue = (name, shouldSkipSetValueAs, ref) => {\n    const field = get(_fields, name);\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n    }\n    _stateFlags.mount && _updateValid();\n  };\n  const updateTouchAndDirty = function (name, fieldValue, isCurrentTouched) {\n    let shouldRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let isFieldDirty = false;\n    const output = {\n      name\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n  const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n    if (props.delayError && error) {\n      delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n    }\n    if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n        isValid\n      } : {}), {\n        errors: _formState.errors,\n        name\n      });\n      _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n      _subjects.state.next(updatedFormState);\n    }\n    validateFields[name]--;\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false\n      });\n      validateFields = {};\n    }\n  };\n  const _executeSchema = async name => _options.resolver ? await _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation)) : {};\n  const executeSchemaAndUpdateState = async names => {\n    const {\n      errors\n    } = await _executeSchema();\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n    return errors;\n  };\n  const executeBuildInValidation = async function (fields, shouldOnlyCheckValid) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      valid: true\n    };\n    for (const name in fields) {\n      const field = fields[name];\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n        if (fieldReference) {\n          const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n          }\n        }\n        fieldValue && (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\n      }\n    }\n    return context.valid;\n  };\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name);\n      field && (field._f.refs ? field._f.refs.every(ref => !live(ref)) : !live(field._f.ref)) && unregister(name);\n    }\n    _names.unMount = new Set();\n  };\n  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));\n  const _getWatch = (names, defaultValue, isGlobal) => {\n    const fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? {\n      [names]: defaultValue\n    } : defaultValue);\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n  const _getFieldArray = name => get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []);\n  const setFieldValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n    let fieldValue = value;\n    if (field) {\n      const fieldReference = field._f;\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(selectRef => selectRef.selected = fieldValue.includes(selectRef.value));\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(data => data === checkboxRef.value) : fieldValue === checkboxRef.value) : fieldReference.refs[0].checked = !!fieldValue;\n          } else {\n            fieldReference.refs.forEach(radioRef => radioRef.checked = radioRef.value === fieldValue);\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name\n            });\n          }\n        }\n      }\n    }\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n    options.shouldValidate && trigger(name);\n  };\n  const setValues = (name, value, options) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n  const setValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    set(_formValues, name, value);\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues\n      });\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value) ? setValues(name, value, options) : setFieldValue(name, value, options);\n    }\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name\n    });\n  };\n  const onChange = async event => {\n    const target = event.target;\n    let name = target.name;\n    const field = get(_fields, name);\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n      const watched = isWatched(name, _names, isBlurEvent);\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n      set(_formValues, name, fieldValue);\n      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n      !isBlurEvent && _subjects.watch.next({\n        name,\n        type: event.type\n      });\n      if (shouldSkipValidation) {\n        return shouldRender && _subjects.state.next(Object.assign({\n          name\n        }, watched ? {} : fieldState));\n      }\n      !isBlurEvent && watched && _subjects.state.next({});\n      validateFields[name] = validateFields[name] ? +1 : 1;\n      _proxyFormState.isValidating && _subjects.state.next({\n        isValidating: true\n      });\n      if (_options.resolver) {\n        const {\n          errors\n        } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n        const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n        isValid = await _updateValid(true);\n      }\n      field._f.deps && trigger(field._f.deps);\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n  const trigger = async function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name);\n    _subjects.state.next({\n      isValidating: true\n    });\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n      isValid = isEmptyObject(errors);\n      validationResult = name ? !fieldNames.some(name => get(errors, name)) : isValid;\n    } else if (name) {\n      validationResult = (await Promise.all(fieldNames.map(async fieldName => {\n        const field = get(_fields, fieldName);\n        return await executeBuildInValidation(field && field._f ? {\n          [fieldName]: field\n        } : field);\n      }))).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n    _subjects.state.next(Object.assign(Object.assign(Object.assign({}, !isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : {\n      name\n    }), _options.resolver ? {\n      isValid\n    } : {}), {\n      errors: _formState.errors,\n      isValidating: false\n    }));\n    options.shouldFocus && !validationResult && focusFieldBy(_fields, key => get(_formState.errors, key), name ? fieldNames : _names.mount);\n    return validationResult;\n  };\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(_formState.errors, inputName)) : _formState.errors = {};\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true\n    });\n  };\n  const setError = (name, error, options) => {\n    const ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n  const watch = (name, defaultValue) => isFunction(name) ? _subjects.watch.subscribe({\n    next: info => name(_getWatch(undefined, defaultValue), info)\n  }) : _getWatch(name, defaultValue, true);\n  const unregister = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n      }\n    }\n    _subjects.watch.next({});\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n    !options.keepIsValid && _updateValid();\n  };\n  const register = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let field = get(_fields, name);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n    _names.mount.add(name);\n    !isUndefined(options.value) && !options.disabled && set(_formValues, name, get(_formValues, name, options.value));\n    field ? isBoolean(options.disabled) && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true);\n    return Object.assign(Object.assign(Object.assign({}, isBoolean(options.disabled) ? {\n      disabled: options.disabled\n    } : {}), _options.shouldUseNativeValidation ? {\n      required: !!options.required,\n      min: getRuleValue(options.min),\n      max: getRuleValue(options.max),\n      minLength: getRuleValue(options.minLength),\n      maxLength: getRuleValue(options.maxLength),\n      pattern: getRuleValue(options.pattern)\n    } : {}), {\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: ref => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n          const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          if (fieldRef === field._f.ref || radioOrCheckbox && compact(field._f.refs).find(option => option === fieldRef)) {\n            return;\n          }\n          set(_fields, name, {\n            _f: radioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n              refs: [...compact(field._f.refs).filter(live), fieldRef],\n              ref: {\n                type: fieldRef.type,\n                name\n              }\n            }) : Object.assign(Object.assign({}, field._f), {\n              ref: fieldRef\n            })\n          });\n          !options.disabled && updateValidAndValue(name, false, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n          if (field._f) {\n            field._f.mount = false;\n          }\n          (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      }\n    });\n  };\n  const handleSubmit = (onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n    let hasNoPromiseError = true;\n    let fieldValues = _options.shouldUnregister ? cloneObject(_formValues) : Object.assign({}, _formValues);\n    _subjects.state.next({\n      isSubmitting: true\n    });\n    try {\n      if (_options.resolver) {\n        const {\n          errors,\n          values\n        } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuildInValidation(_fields);\n      }\n      if (isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(name => get(fieldValues, name))) {\n        _subjects.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(_formState.errors, e));\n        _options.shouldFocusError && focusFieldBy(_fields, key => get(_formState.errors, key), _names.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      _formState.isSubmitted = true;\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors\n      });\n    }\n  };\n  const resetField = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue ? _getDirty(name, get(_defaultValues, name)) : _getDirty();\n    }\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n    _subjects.state.next(Object.assign({}, _formState));\n  };\n  const reset = function (formValues) {\n    let keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues) ? cloneUpdatedValues : _defaultValues;\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n            try {\n              isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneUpdatedValues;\n      _fields = {};\n      _subjects.watch.next({\n        values\n      });\n      _subjects.array.next({\n        values\n      });\n    }\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? !deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? Object.entries(formValues).reduce((previous, _ref3) => {\n        let [key, value] = _ref3;\n        return Object.assign(Object.assign({}, previous), {\n          [key]: value !== get(_defaultValues, key)\n        });\n      }, {}) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n  const setFocus = name => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus\n  };\n}\nfunction useForm() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const _formControl = React.useRef();\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState\n    });\n  }\n  const control = _formControl.current.control;\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: value => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = Object.assign(Object.assign({}, control._formState), value);\n        updateFormState(Object.assign({}, control._formState));\n      }\n    }\n  });\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\nexport { EmailInput as E, Form$1 as F, HeaderText$1 as H, Input as I, Label$1 as L, PasswordInput as P, Spacer as S, TextButton$1 as T, SubmitButton$1 as a, SecondaryButton$1 as b, useForm as u };","map":{"version":3,"mappings":"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","names":["Form","styled","form","props","display","justifyContent","minWidth","width","padding","boxShadow","borderRadius","flexDirection","fontFamily","margin","position","top","left","right","bottom","theme","React","children","Label","label","textFieldLabel","TextFieldRoot","div","maxWidth","height","textFieldRoot","TextField","input","background","border","textField","Bar","textFieldBar","placeholder","register","id","replace","htmlFor","Input","autoComplete","type","required","HeaderText","h1","fontSize","fontWeight","letterSpacing","marginBlockStart","marginBlockEnd","marginInlineStart","marginInlineEnd","marginTop","headerText","TextButton","button","cursor","color","whiteSpace","textButton","SecondaryButton","secondaryButton","SubmitButtonRoot","submitButtonRoot","SubmitButton","verticalAlign","textAlign","textOverflow","overflow","outline","boxSizing","submitButton","size","style","isCheckBoxInput","element","isDateObject","data","Date","isNullOrUndefined","value","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","some","current","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","validate","omit","source","copy","Object","assign","createContext","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","defineProperty","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","useSubscribe","_props","useRef","useEffect","tearDown","subscription","unsubscribe","disabled","subject","subscribe","next","callback","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isFunction","objectHasFunction","appendErrors","validateAllFieldCriteria","errors","message","types","isKey","test","stringToPath","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","ref","focus","refs","isWatched","isBlurEvent","has","watchName","startsWith","slice","cloneObject","Set","createSubject","_observers","observer","push","o","observers","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isBoolean","isFileInput","isHTMLElement","HTMLElement","isMultipleSelect","isRadioInput","isRadioOrCheckbox","isWeb","window","document","live","contains","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","attributes","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","getRadioValue","previous","getFieldValue","every","files","selectedOptions","getResolverOptions","_fields","criteriaMode","shouldUseNativeValidation","isRegex","RegExp","getRuleValue","rule","hasValidation","mount","schemaErrorLookup","error","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","isMessage","isValidElement","getValidateError","getValueAndMessage","validationData","validateField","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","_options","_formState","isDirty","isValidating","dirtyFields","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","unMount","array","delayErrorCallback","timer","validateFields","_subjects","state","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldSetFields","fieldValues","argA","argB","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","shouldFocus","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","fieldRef","querySelectorAll","radioOrCheckbox","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","_a","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","control","useForm","_formControl","updateFormState","useState"],"sources":["/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/front/node_modules/easybase-react/src/ui/Auth/components/Form.tsx","/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/front/node_modules/easybase-react/src/ui/Auth/components/internal/Label.tsx","/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/front/node_modules/easybase-react/src/ui/Auth/components/internal/Input.tsx","/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/front/node_modules/easybase-react/src/ui/Auth/components/EmailInput.tsx","/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/front/node_modules/easybase-react/src/ui/Auth/components/PasswordInput.tsx","/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/front/node_modules/easybase-react/src/ui/Auth/components/HeaderText.tsx","/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/front/node_modules/easybase-react/src/ui/Auth/components/internal/TextButton.tsx","/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/front/node_modules/easybase-react/src/ui/Auth/components/SecondaryButton.tsx","/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/front/node_modules/easybase-react/src/ui/Auth/components/SubmitButton.tsx","/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/front/node_modules/easybase-react/src/ui/Auth/components/Spacer.tsx","/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/front/node_modules/easybase-react/node_modules/react-hook-form/dist/index.esm.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Form = styled.form(props => ({\n    display: \"flex\",\n    justifyContent: \"center\",\n    minWidth: 300,\n    width: 380,\n    padding: '33px 55px',\n    boxShadow: '0 5px 10px 0 rgb(0 0 0 / 10%)',\n    borderRadius: 10,\n    flexDirection: 'column',\n    fontFamily: \"inherit\",\n    margin: '6% auto 50px',\n    '@media (max-width: 520px)': {\n        margin: '0px !important',\n        position: 'fixed !important',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        width: 'initial !important'\n    },\n    ...(props.theme.form ? { ...props.theme.form } : {})\n}))\n\nexport default function (props: React.FormHTMLAttributes<HTMLFormElement>) {\n    return (\n        <Form {...props}>{props.children}</Form>\n    )\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Label = styled.label(props => ({\n    display: \"none\",\n    fontFamily: \"inherit\",\n    ...(props.theme.textFieldLabel ? { ...props.theme.textFieldLabel } : {})\n}))\n\nexport default function (props: React.LabelHTMLAttributes<HTMLLabelElement>) {\n    return (<Label {...props} />)\n}\n","import React from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\nimport styled from 'styled-components';\nimport Label from './Label';\n\nconst TextFieldRoot = styled.div(props => ({\n    position: 'relative',\n    width: '100%',\n    maxWidth: '100%',\n    padding: 0,\n    height: 46,\n    fontFamily: \"inherit\",\n    ...(props.theme.textFieldRoot ? { ...props.theme.textFieldRoot } : {})\n}))\n\nconst TextField = styled.input(props => ({\n    display: \"block\",\n    width: '100%',\n    background: '0 0',\n    border: 'none',\n    fontFamily: \"inherit\",\n    ...(props.theme.textField ? { ...props.theme.textField } : {})\n}))\n\nconst Bar = styled.div(props => props.theme.textFieldBar ? { ...props.theme.textFieldBar } : {})\n\ninterface ITextField extends React.InputHTMLAttributes<HTMLInputElement> {\n    label: string\n    register(): UseFormRegisterReturn\n}\n\nexport default function (props: ITextField) {\n    return (\n        <TextFieldRoot>\n            <TextField placeholder=\"&nbsp;\" {...props} {...props.register()} id={\"textField-\" + props.label.replace(/[^a-zA-Z]+/g, '')} />\n            <Bar />\n            <Label htmlFor={\"textField-\" + props.label.replace(/[^a-zA-Z]+/g, '')}>{props.label}</Label>\n        </TextFieldRoot>\n    )\n}\n","import React, { forwardRef } from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\nimport Input from './internal/Input';\n\ninterface ITextField extends React.InputHTMLAttributes<HTMLInputElement> {\n    label?: string\n    register(): UseFormRegisterReturn\n}\n\nexport default function(props: ITextField) {\n    return (\n        <Input label=\"Email\" autoComplete=\"email\" {...props} type=\"email\" required />\n    )\n}\n","import React from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\nimport Input from './internal/Input';\n\ninterface ITextField extends React.InputHTMLAttributes<HTMLInputElement> {\n    label?: string;\n    register(): UseFormRegisterReturn;\n}\n\nexport default function(props: ITextField) {\n    return (\n        <Input label=\"Password\" {...props} type=\"password\" required />\n    )\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst HeaderText = styled.h1(props => ({\n    fontFamily: \"inherit\",\n    fontSize: 24,\n    fontWeight: 500,\n    letterSpacing: -.2,\n    marginBlockStart: '0.67em',\n    marginBlockEnd: '0.67em',\n    marginInlineStart: 0,\n    marginInlineEnd: 0,\n    marginTop: '16px !important',\n    ...(props.theme.headerText ? { ...props.theme.headerText } : {})\n}))\n\nexport default function (props: React.HTMLAttributes<HTMLHeadingElement>) {\n    return (\n        <HeaderText {...props} />\n    )\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst TextButton = styled.button(props => ({\n    cursor: \"pointer\",\n    color: '#635bff',\n    whiteSpace: 'nowrap',\n    fontWeight: 500,\n    fontSize: 14,\n    margin: 0,\n    background: 'none',\n    border: 'none',\n    ...(props.theme.textButton ? { ...props.theme.textButton } : {})\n}))\n\nexport default function (props: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n    return (\n        <TextButton {...props} type=\"button\" />\n    )\n}\n","import React from 'react';\nimport TextButton from './internal/TextButton';\nimport styled from 'styled-components';\n\nconst SecondaryButton = styled(TextButton)(props => ({\n    margin: '15px',\n    ...(props.theme.secondaryButton ? { ...props.theme.secondaryButton } : {})\n}))\n\nexport default function (props: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n    return (\n        <SecondaryButton {...props} />\n    )\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst SubmitButtonRoot = styled.div(props => props.theme.submitButtonRoot ? props.theme.submitButtonRoot : {});\n\nconst SubmitButton = styled.button(props => ({\n    position: 'relative',\n    border: \"none\",\n    verticalAlign: \"middle\",\n    textAlign: \"center\",\n    textOverflow: \"ellipsis\",\n    overflow: \"hidden\",\n    outline: \"none\",\n    cursor: \"pointer\",\n    boxSizing: 'border-box',\n    ...(props.theme.submitButton ? { ...props.theme.submitButton } : {})\n}))\n\nexport default function (props: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n    return (\n        <SubmitButtonRoot>\n            <SubmitButton type=\"submit\" {...props} />\n        </SubmitButtonRoot>\n    )\n}\n","import React from 'react';\n\ninterface ISpacer {\n    size?: \"xlarge\" | \"large\" | \"medium\" | \"small\"\n}\n\nexport default function (props: ISpacer) {\n    switch (props.size) {\n        case \"xlarge\":\n            return <div style={{ height: 64 }} />   \n        case \"large\":\n            return <div style={{ height: 58 }} />            \n        case \"small\":\n            return <div style={{ height: 16 }} />\n        default:\n            return <div style={{ height: 37 }} />\n    }\n}\n","import * as React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (data) => data instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/.\\d/)) || name;\n\nvar isNameInFieldArray = (names, name) => [...names].some((current) => getNodeParentName(name) === current);\n\nvar compact = (value) => (value || []).filter(Boolean);\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (isObject(obj) && path) {\r\n        const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n        return isUndefined(result) || result === obj\r\n            ? isUndefined(obj[path])\r\n                ? defaultValue\r\n                : obj[path]\r\n            : result;\r\n    }\r\n    return undefined;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nvar omit = (source, key) => {\r\n    const copy = Object.assign({}, source);\r\n    delete copy[key];\r\n    return copy;\r\n};\n\nconst HookFormContext = React.createContext(null);\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\nconst FormProvider = (props) => (React.createElement(HookFormContext.Provider, { value: omit(props, 'children') }, props.children));\n\nvar getProxyFormState = (formState, _proxyFormState, localProxyFormState, isRoot = true) => {\r\n    function createGetter(prop) {\r\n        return () => {\r\n            if (prop in formState) {\r\n                if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\r\n                    _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[prop] = true);\r\n                return formState[prop];\r\n            }\r\n            return undefined;\r\n        };\r\n    }\r\n    const result = {};\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: createGetter(key),\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const formState = omit(formStateData, 'name');\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const tearDown = (subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        };\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => tearDown(subscription);\r\n    }, [props.disabled]);\r\n}\n\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        callback: (value) => shouldSubscribeByName(_name.current, value.name, exact) &&\r\n            shouldRenderFormState(value, _localProxyFormState.current) &&\r\n            updateFormState(Object.assign(Object.assign({}, control._formState), value)),\r\n        subject: control._subjects.state,\r\n    });\r\n    return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    const isArray = Array.isArray(names);\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (isArray) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\r\n            get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback: (formState) => {\r\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n                const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n                updateValue(isUndefined(_name.current) ||\r\n                    (isObject(fieldValues) && !objectHasFunction(fieldValues))\r\n                    ? Object.assign({}, fieldValues) : Array.isArray(fieldValues)\r\n                    ? [...fieldValues]\r\n                    : fieldValues);\r\n            }\r\n        },\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => {\r\n        control._removeUnmounted();\r\n    });\r\n    return value;\r\n}\n\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: !isArrayField,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    const registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), { value }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            if (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField) {\r\n                control.unregister(name, { keepDefaultValue: true });\r\n            }\r\n            else {\r\n                updateMounted(name, false);\r\n            }\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            onChange: (event) => {\r\n                registerProps.onChange({\r\n                    target: {\r\n                        value: getEventValue(event),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.CHANGE,\r\n                });\r\n            },\r\n            onBlur: () => {\r\n                registerProps.onBlur({\r\n                    target: {\r\n                        value: get(control._formValues, name),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.BLUR,\r\n                });\r\n            },\r\n            name,\r\n            value,\r\n            ref: (elm) => {\r\n                const field = get(control._fields, name);\r\n                if (elm && field && elm.focus) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            },\r\n        },\r\n        formState,\r\n        fieldState: {\r\n            invalid: !!get(formState.errors, name),\r\n            isDirty: !!get(formState.dirtyFields, name),\r\n            isTouched: !!get(formState.touchedFields, name),\r\n            error: get(formState.errors, name),\r\n        },\r\n    };\r\n}\n\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? Object.assign(Object.assign({}, errors[name]), { types: Object.assign(Object.assign({}, (errors[name] && errors[name].types ? errors[name].types : {})), { [type]: message || true }) }) : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const _f = field._f;\r\n            const current = omit(field, '_f');\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus && isUndefined(_f.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (_f.refs) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(current)) {\r\n                focusFieldBy(current, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar mapCurrentIds = (values, _fieldIds, keyName) => values.map((value, index) => {\r\n    const output = _fieldIds.current[index];\r\n    return Object.assign(Object.assign({}, value), (output ? { [keyName]: output[keyName] } : {}));\r\n});\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar mapIds = (values = [], keyName) => values.map((value) => (Object.assign(Object.assign({}, (value[keyName] ? {} : { [keyName]: generateId() })), value)));\n\nfunction append(data, value) {\r\n    return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\r\n}\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (isArray || isObject(data)) {\r\n        copy = isArray ? [] : {};\r\n        for (const key in data) {\r\n            if (isFunction(data[key])) {\r\n                copy = data;\r\n                break;\r\n            }\r\n            copy[key] = cloneObject(data[key]);\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (Array.isArray(data)) {\r\n        if (isUndefined(data[to])) {\r\n            data[to] = undefined;\r\n        }\r\n        data.splice(to, 0, data.splice(from, 1)[0]);\r\n        return data;\r\n    }\r\n    return [];\r\n};\n\nvar omitKeys = (fields, keyName) => fields.map((field = {}) => omit(field, keyName));\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\nconst useFieldArray = (props) => {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(mapIds(control._getFieldArray(name), keyName));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    useSubscribe({\r\n        callback: ({ values, name: fieldArrayName }) => {\r\n            if (fieldArrayName === _name.current || !fieldArrayName) {\r\n                setFields(mapIds(get(values, _name.current), keyName));\r\n            }\r\n        },\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValuesWithKey) => {\r\n        const updatedFieldArrayValues = omitKeys(updatedFieldArrayValuesWithKey, keyName);\r\n        _actioned.current = true;\r\n        set(control._formValues, name, updatedFieldArrayValues);\r\n        return updatedFieldArrayValues;\r\n    }, [control, name, keyName]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValuesWithKey = append(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(appendValue, keyName));\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        control._names.focus = getFocusFieldName(name, fieldArrayValues.length - 1, options);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, append, {\r\n            argA: fillEmptyArray(value),\r\n        }, fieldArrayValues);\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const updatedFieldArrayValuesWithKey = prepend(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(convertToArrayPayload(cloneObject(value)), keyName));\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        }, fieldArrayValues);\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValuesWithKey = removeArrayAt(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index);\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, removeArrayAt, {\r\n            argA: index,\r\n        }, fieldArrayValues);\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const updatedFieldArrayValuesWithKey = insert(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index, mapIds(convertToArrayPayload(cloneObject(value)), keyName));\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        }, fieldArrayValues);\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\r\n        swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, fieldArrayValues, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\r\n        moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, fieldArrayValues, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\r\n        const updatedFieldArrayValues = updateAt(updatedFieldArrayValuesWithKey, index, value);\r\n        _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\r\n        const fieldArrayValues = updateValues(_fieldIds.current);\r\n        setFields(_fieldIds.current);\r\n        control._updateFieldArray(name, updateAt, {\r\n            argA: index,\r\n            argB: value,\r\n        }, fieldArrayValues, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValuesWithKey = mapIds(convertToArrayPayload(value), keyName);\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, () => updatedFieldArrayValuesWithKey, {}, fieldArrayValues, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current) {\r\n            control._executeSchema([name]).then((result) => {\r\n                const error = get(result.errors, name);\r\n                if (error && error.type && !get(control._formState.errors, name)) {\r\n                    set(control._formState.errors, name, error);\r\n                    control._subjects.state.next({\r\n                        errors: control._formState.errors,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => key.startsWith(control._names.focus));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control, keyName]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && set(control._formValues, name, []);\r\n        return () => {\r\n            if (control._options.shouldUnregister || shouldUnregister) {\r\n                control.unregister(name);\r\n            }\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control, keyName]),\r\n        move: React.useCallback(move, [updateValues, name, control, keyName]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control, keyName]),\r\n        append: React.useCallback(append$1, [updateValues, name, control, keyName]),\r\n        remove: React.useCallback(remove, [updateValues, name, control, keyName]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control, keyName]),\r\n        update: React.useCallback(update, [updateValues, name, control, keyName]),\r\n        replace: React.useCallback(replace, [updateValues, name, control, keyName]),\r\n        fields: fields,\r\n    };\r\n};\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isHTMLElement = (value) => value instanceof HTMLElement;\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nvar live = (ref) => isHTMLElement(ref) && document.contains(ref);\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) &&\r\n                        !objectRef.filter((data) => (isObject(data) && !isEmptyObject(data)) || isBoolean(data)).length))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : Object.assign({}, markFieldsDirty(data[key]));\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : +value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? undefined\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, appendErrorsCurry(exceedMax ? maxType : minType, message));\r\n    };\r\n    if (required &&\r\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n            (isBoolean(inputValue) && !inputValue) ||\r\n            (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n            (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: inputRef }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber ||\r\n                parseFloat(inputValue);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message,\r\n                ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: inputRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = Object.assign(Object.assign({}, defaultOptions), props);\r\n    let _formState = {\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = _options.defaultValues || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback, wait) => (...args) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(() => callback(...args), wait);\r\n    };\r\n    const _updateValid = async (shouldSkipRender) => {\r\n        let isValid = false;\r\n        if (_proxyFormState.isValid) {\r\n            isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuildInValidation(_fields, true);\r\n            if (!shouldSkipRender && isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n    const _updateFieldArray = (name, method, args, values = [], shouldSetValues = true, shouldSetFields = true) => {\r\n        _stateFlags.action = true;\r\n        if (shouldSetFields && get(_fields, name)) {\r\n            const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n            shouldSetValues && set(_fields, name, fieldValues);\r\n        }\r\n        if (Array.isArray(get(_formState.errors, name))) {\r\n            const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n            shouldSetValues && set(_formState.errors, name, errors);\r\n            unsetEmptyArray(_formState.errors, name);\r\n        }\r\n        if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\r\n            const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n            shouldSetValues &&\r\n                set(_formState.touchedFields, name, touchedFields);\r\n            unsetEmptyArray(_formState.touchedFields, name);\r\n        }\r\n        if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\r\n            _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n        }\r\n        _subjects.state.next({\r\n            isDirty: _getDirty(name, values),\r\n            dirtyFields: _formState.dirtyFields,\r\n            errors: _formState.errors,\r\n            isValid: _formState.isValid,\r\n        });\r\n    };\r\n    const updateErrors = (name, error) => (set(_formState.errors, name, error),\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        }));\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, get(_defaultValues, name));\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n        }\r\n        _stateFlags.mount && _updateValid();\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isCurrentTouched, shouldRender = true) => {\r\n        let isFieldDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n        if (_proxyFormState.isDirty) {\r\n            const isPreviousFormDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            isFieldDirty = isPreviousFormDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && !isCurrentTouched) {\r\n            const isPreviousFieldDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    isPreviousFieldDirty !== get(_formState.dirtyFields, name);\r\n        }\r\n        if (isCurrentTouched && !isPreviousFieldTouched) {\r\n            set(_formState.touchedFields, name, isCurrentTouched);\r\n            output.touchedFields = _formState.touchedFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    (_proxyFormState.touchedFields &&\r\n                        isPreviousFieldTouched !== isCurrentTouched);\r\n        }\r\n        isFieldDirty && shouldRender && _subjects.state.next(output);\r\n        return isFieldDirty ? output : {};\r\n    };\r\n    const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback =\r\n                delayErrorCallback || debounce(updateErrors, props.delayError);\r\n            delayErrorCallback(name, error);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) &&\r\n            !shouldSkipRender) {\r\n            const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), (shouldUpdateValid ? { isValid } : {})), { errors: _formState.errors, name });\r\n            _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating && !validateFields[name]) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => _options.resolver\r\n        ? await _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation))\r\n        : {};\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuildInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const fieldReference = field._f;\r\n                const fieldValue = omit(field, '_f');\r\n                if (fieldReference) {\r\n                    const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\r\n                    if (fieldError[fieldReference.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!shouldOnlyCheckValid) {\r\n                        fieldError[fieldReference.name]\r\n                            ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name])\r\n                            : unset(_formState.errors, fieldReference.name);\r\n                    }\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => {\r\n        const fieldValues = Object.assign({}, (_stateFlags.mount\r\n            ? _formValues\r\n            : isUndefined(defaultValue)\r\n                ? _defaultValues\r\n                : isString(names)\r\n                    ? { [names]: defaultValue }\r\n                    : defaultValue));\r\n        return generateWatchOutput(names, _names, fieldValues, isGlobal);\r\n    };\r\n    const _getFieldArray = (name) => get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []);\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((selectRef) => (selectRef.selected = fieldValue.includes(selectRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                : fieldValue === checkboxRef.value))\r\n                            : (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (!isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        set(_formValues, name, value);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, value),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(value)\r\n                ? setValues(name, value, options)\r\n                : setFieldValue(name, value, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            set(_formValues, name, fieldValue);\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                return (shouldRender &&\r\n                    _subjects.state.next(Object.assign({ name }, (watched ? {} : fieldState))));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name] ? +1 : 1;\r\n            _proxyFormState.isValidating &&\r\n                _subjects.state.next({\r\n                    isValidating: true,\r\n                });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                isValid = await _updateValid(true);\r\n            }\r\n            field._f.deps && trigger(field._f.deps);\r\n            shouldRenderByError(false, name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuildInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuildInValidation(_fields);\r\n        }\r\n        _subjects.state.next(Object.assign(Object.assign(Object.assign({}, (!isString(name) ||\r\n            (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n            ? {}\r\n            : { name })), (_options.resolver ? { isValid } : {})), { errors: _formState.errors, isValidating: false }));\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = Object.assign(Object.assign({}, _defaultValues), (_stateFlags.mount ? _formValues : {}));\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n            isValid: true,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, Object.assign(Object.assign({}, error), { ref }));\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (info) => name(_getWatch(undefined, defaultValue), info),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next(Object.assign(Object.assign({}, _formState), (!options.keepDirty ? {} : { isDirty: _getDirty() })));\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        set(_fields, name, {\r\n            _f: Object.assign(Object.assign(Object.assign({}, (field && field._f ? field._f : { ref: { name } })), { name, mount: true }), options),\r\n        });\r\n        _names.mount.add(name);\r\n        !isUndefined(options.value) &&\r\n            !options.disabled &&\r\n            set(_formValues, name, get(_formValues, name, options.value));\r\n        field\r\n            ? isBoolean(options.disabled) &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true);\r\n        return Object.assign(Object.assign(Object.assign({}, (isBoolean(options.disabled) ? { disabled: options.disabled } : {})), (_options.shouldUseNativeValidation\r\n            ? {\r\n                required: !!options.required,\r\n                min: getRuleValue(options.min),\r\n                max: getRuleValue(options.max),\r\n                minLength: getRuleValue(options.minLength),\r\n                maxLength: getRuleValue(options.maxLength),\r\n                pattern: getRuleValue(options.pattern),\r\n            }\r\n            : {})), { name,\r\n            onChange, onBlur: onChange, ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    if (fieldRef === field._f.ref ||\r\n                        (radioOrCheckbox &&\r\n                            compact(field._f.refs).find((option) => option === fieldRef))) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: radioOrCheckbox\r\n                            ? Object.assign(Object.assign({}, field._f), { refs: [...compact(field._f.refs).filter(live), fieldRef], ref: { type: fieldRef.type, name } }) : Object.assign(Object.assign({}, field._f), { ref: fieldRef }),\r\n                    });\r\n                    !options.disabled && updateValidAndValue(name, false, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            } });\r\n    };\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = _options.shouldUnregister\r\n            ? cloneObject(_formValues)\r\n            : Object.assign({}, _formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuildInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors) &&\r\n                Object.keys(_formState.errors).every((name) => get(fieldValues, name))) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                onInvalid && (await onInvalid(_formState.errors, e));\r\n                _options.shouldFocusError &&\r\n                    focusFieldBy(_fields, (key) => get(_formState.errors, key), _names.mount);\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (isUndefined(options.defaultValue)) {\r\n            setValue(name, get(_defaultValues, name));\r\n        }\r\n        else {\r\n            setValue(name, options.defaultValue);\r\n            set(_defaultValues, name, options.defaultValue);\r\n        }\r\n        if (!options.keepTouched) {\r\n            unset(_formState.touchedFields, name);\r\n        }\r\n        if (!options.keepDirty) {\r\n            unset(_formState.dirtyFields, name);\r\n            _formState.isDirty = options.defaultValue\r\n                ? _getDirty(name, get(_defaultValues, name))\r\n                : _getDirty();\r\n        }\r\n        if (!options.keepError) {\r\n            unset(_formState.errors, name);\r\n            _proxyFormState.isValid && _updateValid();\r\n        }\r\n        _subjects.state.next(Object.assign({}, _formState));\r\n    };\r\n    const reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (isWeb) {\r\n                for (const name of _names.mount) {\r\n                    const field = get(_fields, name);\r\n                    if (field && field._f) {\r\n                        const fieldReference = Array.isArray(field._f.refs)\r\n                            ? field._f.refs[0]\r\n                            : field._f.ref;\r\n                        try {\r\n                            isHTMLElement(fieldReference) &&\r\n                                fieldReference.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _fields = {};\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty\r\n                ? _formState.isDirty\r\n                : keepStateOptions.keepDefaultValues\r\n                    ? !deepEqual(formValues, _defaultValues)\r\n                    : false,\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty\r\n                ? _formState.dirtyFields\r\n                : (keepStateOptions.keepDefaultValues && formValues\r\n                    ? Object.entries(formValues).reduce((previous, [key, value]) => (Object.assign(Object.assign({}, previous), { [key]: value !== get(_defaultValues, key) })), {})\r\n                    : {}),\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors\r\n                ? _formState.errors\r\n                : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n    };\r\n    const setFocus = (name) => {\r\n        const field = get(_fields, name)._f;\r\n        (field.ref.focus ? field.ref : field.refs[0]).focus();\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            _executeSchema,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            set _fields(value) {\r\n                _fields = value;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            set _formValues(value) {\r\n                _formValues = value;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            set _defaultValues(value) {\r\n                _defaultValues = value;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = Object.assign(Object.assign({}, _options), value);\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n    };\r\n}\n\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    });\r\n    if (_formControl.current) {\r\n        _formControl.current.control._options = props;\r\n    }\r\n    else {\r\n        _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), { formState });\r\n    }\r\n    const control = _formControl.current.control;\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback: (value) => {\r\n            if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n                control._formState = Object.assign(Object.assign({}, control._formState), value);\r\n                updateFormState(Object.assign({}, control._formState));\r\n            }\r\n        },\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.js.map\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}