{"ast":null,"code":"import { useReducer, useMemo, useCallback, useRef } from 'react';\n/**\n * Core state reducer for most hooks.\n * @param initialValue Initial Value, can be any object or a function returning the value.\n */\nexport default function useStateMachine(initialValue) {\n  const [currentState, dispatch] = useReducer(reducer, initialValue, initialValue => {\n    if (typeof initialValue === 'function') {\n      initialValue = initialValue();\n    }\n    if (!initialValue) {\n      // if the initial value is falsy,\n      // then should an empty object be spread over.\n      initialValue = {};\n    }\n    return Object.assign(Object.assign({}, initialValue), {\n      error: null,\n      state: 'loading'\n    });\n  });\n  const state = useMemo(() => Object.assign(Object.assign({}, currentState), {\n    // Add loading indicator\n    loading: currentState.state === 'loading'\n  }), [currentState]);\n  const stateRef = useRef(currentState);\n  stateRef.current = currentState;\n  const changeState = useCallback(fn => {\n    const next = fn(stateRef.current);\n    dispatch({\n      type: 'loading_finished',\n      payload: next\n    });\n  }, []);\n  return [state, dispatch, changeState];\n}\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'loading_started':\n      return Object.assign(Object.assign({}, state), {\n        state: 'loading'\n      });\n    case 'loading_finished':\n      return Object.assign(Object.assign({}, action.payload), {\n        error: null,\n        state: 'done'\n      });\n    case 'loading_error':\n      return Object.assign(Object.assign(Object.assign({}, state), action.payload.setResult ? action.payload.result || {} : {}), {\n        state: 'error',\n        error: action.payload.error\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["useReducer","useMemo","useCallback","useRef","useStateMachine","initialValue","currentState","dispatch","reducer","Object","assign","error","state","loading","stateRef","current","changeState","fn","next","type","payload","action","setResult","result"],"sources":["/home/sol/Documentos/AUS/3ro segundo cuatri/ing 2/URV/node_modules/use-pouchdb/lib/state-machine.js"],"sourcesContent":["import { useReducer, useMemo, useCallback, useRef } from 'react';\n/**\n * Core state reducer for most hooks.\n * @param initialValue Initial Value, can be any object or a function returning the value.\n */\nexport default function useStateMachine(initialValue) {\n    const [currentState, dispatch] = useReducer(reducer, initialValue, (initialValue) => {\n        if (typeof initialValue === 'function') {\n            initialValue = initialValue();\n        }\n        if (!initialValue) {\n            // if the initial value is falsy,\n            // then should an empty object be spread over.\n            initialValue = {};\n        }\n        return Object.assign(Object.assign({}, initialValue), { error: null, state: 'loading' });\n    });\n    const state = useMemo(() => (Object.assign(Object.assign({}, currentState), { \n        // Add loading indicator\n        loading: currentState.state === 'loading' })), [currentState]);\n    const stateRef = useRef(currentState);\n    stateRef.current = currentState;\n    const changeState = useCallback((fn) => {\n        const next = fn(stateRef.current);\n        dispatch({\n            type: 'loading_finished',\n            payload: next,\n        });\n    }, []);\n    return [state, dispatch, changeState];\n}\nfunction reducer(state, action) {\n    switch (action.type) {\n        case 'loading_started':\n            return Object.assign(Object.assign({}, state), { state: 'loading' });\n        case 'loading_finished':\n            return Object.assign(Object.assign({}, action.payload), { error: null, state: 'done' });\n        case 'loading_error':\n            return Object.assign(Object.assign(Object.assign({}, state), (action.payload.setResult ? action.payload.result || {} : {})), { state: 'error', error: action.payload.error });\n        default:\n            return state;\n    }\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,OAAO,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAChE;AACA;AACA;AACA;AACA,eAAe,SAASC,eAAe,CAACC,YAAY,EAAE;EAClD,MAAM,CAACC,YAAY,EAAEC,QAAQ,CAAC,GAAGP,UAAU,CAACQ,OAAO,EAAEH,YAAY,EAAGA,YAAY,IAAK;IACjF,IAAI,OAAOA,YAAY,KAAK,UAAU,EAAE;MACpCA,YAAY,GAAGA,YAAY,EAAE;IACjC;IACA,IAAI,CAACA,YAAY,EAAE;MACf;MACA;MACAA,YAAY,GAAG,CAAC,CAAC;IACrB;IACA,OAAOI,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,YAAY,CAAC,EAAE;MAAEM,KAAK,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAU,CAAC,CAAC;EAC5F,CAAC,CAAC;EACF,MAAMA,KAAK,GAAGX,OAAO,CAAC,MAAOQ,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,YAAY,CAAC,EAAE;IACxE;IACAO,OAAO,EAAEP,YAAY,CAACM,KAAK,KAAK;EAAU,CAAC,CAAE,EAAE,CAACN,YAAY,CAAC,CAAC;EAClE,MAAMQ,QAAQ,GAAGX,MAAM,CAACG,YAAY,CAAC;EACrCQ,QAAQ,CAACC,OAAO,GAAGT,YAAY;EAC/B,MAAMU,WAAW,GAAGd,WAAW,CAAEe,EAAE,IAAK;IACpC,MAAMC,IAAI,GAAGD,EAAE,CAACH,QAAQ,CAACC,OAAO,CAAC;IACjCR,QAAQ,CAAC;MACLY,IAAI,EAAE,kBAAkB;MACxBC,OAAO,EAAEF;IACb,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EACN,OAAO,CAACN,KAAK,EAAEL,QAAQ,EAAES,WAAW,CAAC;AACzC;AACA,SAASR,OAAO,CAACI,KAAK,EAAES,MAAM,EAAE;EAC5B,QAAQA,MAAM,CAACF,IAAI;IACf,KAAK,iBAAiB;MAClB,OAAOV,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEE,KAAK,CAAC,EAAE;QAAEA,KAAK,EAAE;MAAU,CAAC,CAAC;IACxE,KAAK,kBAAkB;MACnB,OAAOH,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEW,MAAM,CAACD,OAAO,CAAC,EAAE;QAAET,KAAK,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAO,CAAC,CAAC;IAC3F,KAAK,eAAe;MAChB,OAAOH,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEE,KAAK,CAAC,EAAGS,MAAM,CAACD,OAAO,CAACE,SAAS,GAAGD,MAAM,CAACD,OAAO,CAACG,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAE,EAAE;QAAEX,KAAK,EAAE,OAAO;QAAED,KAAK,EAAEU,MAAM,CAACD,OAAO,CAACT;MAAM,CAAC,CAAC;IACjL;MACI,OAAOC,KAAK;EAAC;AAEzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}