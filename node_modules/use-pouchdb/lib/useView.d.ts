/// <reference types="pouchdb-mapreduce" />
import { ResultType } from './state-machine';
import { CommonOptions } from './utils';
declare type ViewResponseBase<Result> = PouchDB.Query.Response<Result> & {
    /**
     * Include an update_seq value indicating which sequence id of the underlying database the view
     * reflects.
     */
    update_seq?: number | string;
};
export declare type ViewResponse<T> = ResultType<ViewResponseBase<T>>;
/**
 * Query a view and subscribe to its updates.
 * @param {string | function | object} fun The name of the view or a temporary view.
 * @param {object} [opts] PouchDB's query-options
 */
export default function useView<Content, Result, Model = Content>(fun: string | PouchDB.Map<Model, Result> | PouchDB.Filter<Model, Result>, opts?: PouchDB.Query.Options<Model, Result> & {
    update_seq?: boolean;
} & CommonOptions): ViewResponse<Result>;
export {};
