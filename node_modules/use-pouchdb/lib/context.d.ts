/// <reference types="pouchdb-find" />
/// <reference types="pouchdb-core" />
/// <reference types="pouchdb-mapreduce" />
import React, { ReactNode } from 'react';
import SubscriptionManager from './subscription';
export interface PouchContextObject {
    pouchdb: PouchDB.Database;
    subscriptionManager: SubscriptionManager;
}
/**
 * Provide access to a database.
 */
export interface SingleDbProviderArguments {
    children: JSX.Element | ReactNode;
    pouchdb: PouchDB.Database;
    name?: string;
}
/**
 * Provide access to multiple databases at once.
 */
export interface MultiDbProviderArguments {
    children: JSX.Element | ReactNode;
    databases: {
        [key: string]: PouchDB.Database;
    };
    default: string;
}
export declare type ProviderArguments = SingleDbProviderArguments | MultiDbProviderArguments;
/**
 * Create a context to provide access to PouchDB databases.
 * All hooks of usePouchDB will use this context.
 * @param args React arguments.
 */
export declare function Provider(args: ProviderArguments): React.ReactElement;
/**
 * Provides access to the Database & SubscriptionManager pair in the usePouchDB-Context.
 * @param name Name of the Database or its overwritten name. Defaults to "default".
 */
export declare function useContext(name?: string): PouchContextObject;
