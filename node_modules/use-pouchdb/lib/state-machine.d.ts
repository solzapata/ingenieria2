/// <reference types="react" />
/// <reference types="pouchdb-core" />
/**
 * Core state reducer for most hooks.
 * @param initialValue Initial Value, can be any object or a function returning the value.
 */
export default function useStateMachine<Result>(initialValue: initValueType<Result>): StateMachineResultType<Result>;
export declare type QueryState = 'loading' | 'done' | 'error';
interface State {
    /**
     * State. Can be 'loading', 'done' or 'error'.
     */
    state: QueryState;
    /**
     * If it did error, then the error it is returned in this field.
     */
    error: PouchDB.Core.Error | null;
}
declare type initValueType<T> = T | (() => T);
export declare type Dispatch<T> = React.Dispatch<Actions<T>>;
export declare type ResultType<T> = T & State & {
    /**
     * Is this hook currently loading/updating.
     */
    loading: boolean;
};
declare type StateMachineResultType<T> = [
    ResultType<T>,
    Dispatch<T>,
    (fn: (state: T) => T) => void
];
export interface StartLoading {
    type: 'loading_started';
}
export interface FinishedLoading<Result> {
    type: 'loading_finished';
    payload: Result;
}
export interface DidError<Result = undefined> {
    type: 'loading_error';
    payload: {
        error: PouchDB.Core.Error;
        setResult: boolean;
        result?: Result;
    };
}
export declare type Actions<T> = StartLoading | FinishedLoading<T> | DidError<T>;
export {};
