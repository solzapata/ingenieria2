import { useReducer, useMemo, useCallback, useRef } from 'react';
/**
 * Core state reducer for most hooks.
 * @param initialValue Initial Value, can be any object or a function returning the value.
 */
export default function useStateMachine(initialValue) {
    const [currentState, dispatch] = useReducer(reducer, initialValue, (initialValue) => {
        if (typeof initialValue === 'function') {
            initialValue = initialValue();
        }
        if (!initialValue) {
            // if the initial value is falsy,
            // then should an empty object be spread over.
            initialValue = {};
        }
        return Object.assign(Object.assign({}, initialValue), { error: null, state: 'loading' });
    });
    const state = useMemo(() => (Object.assign(Object.assign({}, currentState), { 
        // Add loading indicator
        loading: currentState.state === 'loading' })), [currentState]);
    const stateRef = useRef(currentState);
    stateRef.current = currentState;
    const changeState = useCallback((fn) => {
        const next = fn(stateRef.current);
        dispatch({
            type: 'loading_finished',
            payload: next,
        });
    }, []);
    return [state, dispatch, changeState];
}
function reducer(state, action) {
    switch (action.type) {
        case 'loading_started':
            return Object.assign(Object.assign({}, state), { state: 'loading' });
        case 'loading_finished':
            return Object.assign(Object.assign({}, action.payload), { error: null, state: 'done' });
        case 'loading_error':
            return Object.assign(Object.assign(Object.assign({}, state), (action.payload.setResult ? action.payload.result || {} : {})), { state: 'error', error: action.payload.error });
        default:
            return state;
    }
}
