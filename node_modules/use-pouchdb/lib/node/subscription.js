"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SubscriptionManager_pouch, _SubscriptionManager_destroyListener, _SubscriptionManager_docsSubscription, _SubscriptionManager_viewsSubscription, _SubscriptionManager_didUnsubscribeAll;
Object.defineProperty(exports, "__esModule", { value: true });
const pouchdb_utils_1 = require("pouchdb-utils");
class SubscriptionManager {
    constructor(pouch) {
        _SubscriptionManager_pouch.set(this, void 0);
        _SubscriptionManager_destroyListener.set(this, void 0);
        _SubscriptionManager_docsSubscription.set(this, null);
        _SubscriptionManager_viewsSubscription.set(this, new Map());
        _SubscriptionManager_didUnsubscribeAll.set(this, false);
        __classPrivateFieldSet(this, _SubscriptionManager_pouch, pouch, "f");
        __classPrivateFieldSet(this, _SubscriptionManager_destroyListener, () => {
            this.unsubscribeAll();
        }, "f");
        pouch.once('destroyed', __classPrivateFieldGet(this, _SubscriptionManager_destroyListener, "f"));
    }
    subscribeToDocs(ids, callback) {
        var _a;
        if (__classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, "f")) {
            return () => {
                return;
            };
        }
        if (__classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f") == null) {
            __classPrivateFieldSet(this, _SubscriptionManager_docsSubscription, createDocSubscription(__classPrivateFieldGet(this, _SubscriptionManager_pouch, "f")), "f");
        }
        const isIds = Array.isArray(ids) && ids.length > 0;
        if (isIds) {
            for (const id of ids !== null && ids !== void 0 ? ids : []) {
                if (__classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f").ids.has(id)) {
                    (_a = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f").ids
                        .get(id)) === null || _a === void 0 ? void 0 : _a.add(callback);
                }
                else {
                    const set = new Set();
                    set.add(callback);
                    __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f").ids.set(id, set);
                }
            }
        }
        else {
            __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f").all.add(callback);
        }
        let didUnsubscribe = false;
        return () => {
            var _a, _b, _c, _d;
            if (didUnsubscribe || __classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, "f"))
                return;
            didUnsubscribe = true;
            if (isIds) {
                for (const id of ids !== null && ids !== void 0 ? ids : []) {
                    const set = (_a = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f")) === null || _a === void 0 ? void 0 : _a.ids.get(id);
                    set === null || set === void 0 ? void 0 : set.delete(callback);
                    if ((set === null || set === void 0 ? void 0 : set.size) === 0) {
                        (_b = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f")) === null || _b === void 0 ? void 0 : _b.ids.delete(id);
                    }
                }
            }
            else {
                (_c = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f")) === null || _c === void 0 ? void 0 : _c.all.delete(callback);
            }
            if (((_d = __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f")) === null || _d === void 0 ? void 0 : _d.all.size) === 0 &&
                __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f").ids.size === 0) {
                __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f").changesFeed.cancel();
                __classPrivateFieldSet(this, _SubscriptionManager_docsSubscription, null, "f");
            }
        };
    }
    subscribeToView(fun, callback) {
        if (__classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, "f")) {
            return () => {
                return;
            };
        }
        let subscription;
        if (__classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, "f").has(fun)) {
            subscription = __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, "f").get(fun);
        }
        else {
            subscription = subscribeToView(__classPrivateFieldGet(this, _SubscriptionManager_pouch, "f"), fun);
            __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, "f").set(fun, subscription);
        }
        subscription.callbacks.add(callback);
        let didUnsubscribe = false;
        return () => {
            if (didUnsubscribe || __classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, "f"))
                return;
            didUnsubscribe = true;
            subscription.callbacks.delete(callback);
            if (subscription.callbacks.size === 0) {
                subscription.feed.cancel();
                __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, "f").delete(fun);
            }
        };
    }
    unsubscribeAll() {
        if (__classPrivateFieldGet(this, _SubscriptionManager_didUnsubscribeAll, "f"))
            return;
        __classPrivateFieldSet(this, _SubscriptionManager_didUnsubscribeAll, true, "f");
        __classPrivateFieldGet(this, _SubscriptionManager_pouch, "f").removeListener('destroyed', __classPrivateFieldGet(this, _SubscriptionManager_destroyListener, "f"));
        if (__classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f")) {
            __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f").changesFeed.cancel();
            __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f").all.clear();
            __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f").ids.forEach(set => {
                set.clear();
            });
            __classPrivateFieldGet(this, _SubscriptionManager_docsSubscription, "f").ids.clear();
        }
        for (const viewInfo of __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, "f").values()) {
            viewInfo.feed.cancel();
            viewInfo.callbacks.clear();
        }
        __classPrivateFieldGet(this, _SubscriptionManager_viewsSubscription, "f").clear();
    }
}
exports.default = SubscriptionManager;
_SubscriptionManager_pouch = new WeakMap(), _SubscriptionManager_destroyListener = new WeakMap(), _SubscriptionManager_docsSubscription = new WeakMap(), _SubscriptionManager_viewsSubscription = new WeakMap(), _SubscriptionManager_didUnsubscribeAll = new WeakMap();
function createDocSubscription(pouch) {
    let docsSubscription = null;
    const changesFeed = pouch
        .changes({
        since: 'now',
        live: true,
    })
        .on('change', change => {
        const hasAll = (docsSubscription === null || docsSubscription === void 0 ? void 0 : docsSubscription.all) != null && docsSubscription.all.size > 0;
        const hasId = docsSubscription && docsSubscription.ids.has(change.id);
        if (change.deleted) {
            if (hasAll) {
                const subscription = docsSubscription;
                notify(subscription.all, true, change.id);
            }
            if (hasId) {
                const subscription = docsSubscription;
                notify(subscription.ids.get(change.id), true, change.id);
            }
        }
        else {
            pouch
                .get(change.id)
                .then(doc => {
                if (hasAll) {
                    const subscription = docsSubscription;
                    notify(subscription.all, false, change.id, doc);
                }
                if (hasId) {
                    const subscription = docsSubscription;
                    notify(subscription.ids.get(change.id), false, change.id, doc);
                }
            })
                .catch(console.error);
        }
    });
    docsSubscription = {
        changesFeed,
        all: new Set(),
        ids: new Map(),
    };
    return docsSubscription;
}
function notify(set, deleted, id, doc) {
    for (const subscription of set) {
        try {
            const document = doc ? (0, pouchdb_utils_1.clone)(doc) : undefined;
            subscription(deleted, id, document);
        }
        catch (err) {
            console.error(err);
        }
    }
}
function subscribeToView(pouch, view) {
    let viewsSubscription = null;
    const changesFeed = pouch
        .changes({
        since: 'now',
        live: true,
        filter: '_view',
        view,
    })
        .on('change', change => {
        var _a;
        for (const callback of (_a = viewsSubscription === null || viewsSubscription === void 0 ? void 0 : viewsSubscription.callbacks) !== null && _a !== void 0 ? _a : []) {
            try {
                callback(change.id);
            }
            catch (err) {
                console.error(err);
            }
        }
    });
    viewsSubscription = {
        feed: changesFeed,
        callbacks: new Set(),
    };
    return viewsSubscription;
}
