"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
/**
 * Core state reducer for most hooks.
 * @param initialValue Initial Value, can be any object or a function returning the value.
 */
function useStateMachine(initialValue) {
    const [currentState, dispatch] = (0, react_1.useReducer)(reducer, initialValue, (initialValue) => {
        if (typeof initialValue === 'function') {
            initialValue = initialValue();
        }
        if (!initialValue) {
            // if the initial value is falsy,
            // then should an empty object be spread over.
            initialValue = {};
        }
        return {
            ...initialValue,
            error: null,
            state: 'loading',
        };
    });
    const state = (0, react_1.useMemo)(() => ({
        ...currentState,
        // Add loading indicator
        loading: currentState.state === 'loading',
    }), [currentState]);
    const stateRef = (0, react_1.useRef)(currentState);
    stateRef.current = currentState;
    const changeState = (0, react_1.useCallback)((fn) => {
        const next = fn(stateRef.current);
        dispatch({
            type: 'loading_finished',
            payload: next,
        });
    }, []);
    return [state, dispatch, changeState];
}
exports.default = useStateMachine;
function reducer(state, action) {
    switch (action.type) {
        case 'loading_started':
            return {
                ...state,
                state: 'loading',
            };
        case 'loading_finished':
            return {
                ...action.payload,
                error: null,
                state: 'done',
            };
        case 'loading_error':
            return {
                ...state,
                ...(action.payload.setResult ? action.payload.result || {} : {}),
                state: 'error',
                error: action.payload.error,
            };
        default:
            return state;
    }
}
