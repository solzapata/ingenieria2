"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const context_1 = require("./context");
const state_machine_1 = __importDefault(require("./state-machine"));
/**
 * Retrieves a document and subscribes to it's changes.
 * @param {string} id - Document ID of the document that should be fetched.
 * @param {object} [options] - PouchDB get options. Excluding 'open_revs'.
 * @param {object|function} [initialValue] - Value that should be returned while fetching the doc.
 */
function useDoc(id, options, initialValue) {
    const { pouchdb: pouch, subscriptionManager } = (0, context_1.useContext)(options === null || options === void 0 ? void 0 : options.db);
    const { rev, revs, revs_info, conflicts, attachments, binary, latest } = options || {};
    const getInitialValue = (0, react_1.useCallback)(() => {
        let doc = null;
        if (typeof initialValue === 'function') {
            doc = initialValue();
        }
        else if (initialValue && typeof initialValue === 'object') {
            doc = initialValue;
        }
        const resultDoc = doc;
        // Add _id and _rev to the initial value (if they aren't set)
        if (resultDoc && resultDoc._id == null) {
            resultDoc._id = id;
        }
        if (resultDoc && resultDoc._rev == null) {
            resultDoc._rev = '';
        }
        return { doc: resultDoc };
    }, [id, initialValue]);
    const [state, dispatch] = (0, state_machine_1.default)(getInitialValue);
    // Reset the document if the id did change and a initial value is set.
    const lastId = (0, react_1.useRef)(id);
    (0, react_1.useEffect)(() => {
        if (id === lastId.current)
            return;
        lastId.current = id;
        if (initialValue != null) {
            dispatch({
                type: 'loading_finished',
                payload: getInitialValue(),
            });
        }
    }, [id, initialValue, getInitialValue, dispatch]);
    // Workaround, that initial value can change on every render, without re-run the query effect.
    // eslint-plugin-react-hooks missing dependency for all other dependency, but getInitialValue.
    const getInitialValueRef = (0, react_1.useRef)(getInitialValue);
    getInitialValueRef.current = getInitialValue;
    (0, react_1.useEffect)(() => {
        // Is this instance still current?
        let isMounted = true;
        const fetchDoc = async () => {
            dispatch({ type: 'loading_started' });
            try {
                const doc = await pouch.get(id, {
                    rev,
                    revs,
                    revs_info,
                    conflicts,
                    attachments,
                    binary,
                    latest,
                });
                if (isMounted) {
                    dispatch({
                        type: 'loading_finished',
                        payload: { doc },
                    });
                }
            }
            catch (err) {
                if (isMounted) {
                    dispatch({
                        type: 'loading_error',
                        payload: {
                            error: err,
                            setResult: true,
                            result: getInitialValueRef.current(),
                        },
                    });
                }
            }
        };
        fetchDoc();
        // Use the changes feed to get updates to the document
        const unsubscribe = rev && !latest // but don't subscribe if a specific rev is requested.
            ? () => {
                return;
            }
            : subscriptionManager.subscribeToDocs([id], (deleted, _id, doc) => {
                if (!isMounted)
                    return;
                // If the document got deleted it should change to an 404 error state
                // or if there is a conflicting version, then it should show the new winning one.
                if (deleted || revs || revs_info || conflicts || attachments) {
                    fetchDoc();
                }
                else {
                    dispatch({
                        type: 'loading_finished',
                        payload: {
                            doc: doc,
                        },
                    });
                }
            });
        return () => {
            isMounted = false;
            unsubscribe();
        };
    }, [
        dispatch,
        pouch,
        subscriptionManager,
        id,
        rev,
        revs,
        revs_info,
        conflicts,
        attachments,
        binary,
        latest,
    ]);
    return state;
}
exports.default = useDoc;
